<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- Build file for Velocity -->

<!-- This project has its basedir set to the root directory   -->
<!-- of the velocity distribution. This is necessary so that  -->
<!-- all the code that uses relative directory references     -->
<!-- (like the tests) can be run in the same way when using   -->
<!-- the ant based build and the maven based build.           -->
<!-- *** DO NOT CHANGE THIS SETTING LIGHTLY! ***              -->
<project name="Velocity" default="jar" basedir="..">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it -->
  <property file="${user.home}/.ant.properties" />
  <property file="${user.home}/build.properties" />
  <property file=".ant.properties" />

  <!-- This file contains all the defaults for building Velocity -->
  <property file="build/build.properties" />

  <!-- Build classpath -->
  <path id="velocity.build.classpath">
    <fileset dir="${velocity.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>


  <!-- =================================================================== -->
  <!-- prints the targets available in this build file                     -->
  <!-- =================================================================== -->
  <target name="help">

    <echo>
  ****************************************************************************
  **
  **  Help for Velocity build file
  **
  **  Target         Depends on          Description
  **                                     default - see jar
  **  env                                echos environment variables to screen
  **  prepare                            creates build dir, copies source
  **  J2EE-error     prepare             message if J2EE missing but required
  **  parser         env                 calls jjtree and javacc
  **                                     (requires javaCC 3.1+ and ant 1.6.x)
  **  compile        prepare             compiles non-J2EE source
  **  compile-J2EE   prepare, J2EE-error compiles J2EE source
  **  compile-copy                       move non-J2EE classes out of the way.
  **  jar            compile             prepares {project}-{version} jar file. Note
  **                                     that nothing except Velocity code is included
  **                                     dependencies are separate.
  **  jar-dep        compile             Same as 'jar', but includes Oro and Logkit
  **                                     dependencies for convenience.
  **  jar-J2EE       compile-J2EE        prepares jar including J2EE
  **  jar-J2EE-dep   compile-J2EE        same as 'jar-J2EE', but with Oro and
  **                                     Logkit dependencies for convenience
  **  jar-core       compile             prepares jar with only core classes
  **  jar-util       compile             prepares jar with only util classes
  **  jar-servlet    compile             prepares jar with only servlet classes
  **  jar-src                            prepares jar of source
  **  examples       jar                 compiles examples
  **  examples-clean-anakia              cleans anakia example
  **  examples-clean-all                 cleans the anakia example
  **  javadocs       prepare             build javadocs
  **  javadocs-clean                     delete javadocs
  **  docs           jar                 Generates Velocity Documentation
  **  docs-clean                         Cleans generated Velocity Documentation
  **  test           compile             runs JUnit tests
  **  test-clean                         deletes test results
  **  clean                              deletes build dir
  ***************************************************************************
    </echo>

  </target>
  <!-- =================================================================== -->
  <!-- prints the environment                                              -->
  <!-- =================================================================== -->
  <target name="env">
    <echo message="java.home = ${java.home}"/>
    <echo message="user.home = ${user.home}"/>
    <echo message="java.class.path = ${java.class.path}"/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="basic-prepare, prepare-jdbc, prepare-jdk14"/>

  <target name="basic-prepare">
    <tstamp>
      <format property="build.time" pattern="yyyy-MM-dd hh:mm:ss" />
      <format property="build.year" pattern="yyyy"/>
    </tstamp>
    <filter token="build.year" value="${build.year}"/>
    <filter token="build.version" value="${version}"/>
    <filter token="build.time" value="${build.time}"/>

    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.test.src}"/>
    <mkdir dir="${build.test.dest}"/>

    <copy todir="${build.src}" filtering="yes">
      <fileset dir="${src.java.dir}">
        <include name="**/*.java"/>
        <exclude name="**/DataSourceResourceLoader.java"/>
        <exclude name="**/JdkLogChute.java"/>
      </fileset>
    </copy>

    <filter token="test.dir" value="${test.dir}"/>
    <filter token="build.test" value="${build.test}"/>

    <copy todir="${build.test.src}" filtering="yes">
      <fileset dir="${test.java.dir}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare-jdbc" depends="check-jdbc,check-jdbc-true,check-jdbc-false"/>
  <target name="prepare-jdk14" depends="check-jdk14,check-jdk14-true,check-jdk14-false"/>

  <target name="check-jdbc">
    <!--  note: check to see if required class is available.  -->
    <!-- might be j2ee.jar, jdbc2_0-stdext.jar, or simply JDK 1.4+ -->
    <available classname="javax.sql.DataSource"
               property="jdbc.present">
      <classpath refid="velocity.build.classpath"/>
    </available>
  </target>

  <target name="check-jdbc-true" if="jdbc.present">
    <copy todir="${build.src}" filtering="yes">
      <fileset dir="${src.java.dir}">
        <include name="**/DataSourceResourceLoader.java"/>
      </fileset>
    </copy>
  </target>

  <target name="check-jdbc-false" unless="jdbc.present">
    <echo level="warning">
      ********************************************************
      **
      ** The javax.sql.Datasource class has not been found on
      ** your classpath. This means that your newly built 
      ** Velocity jar will not contain the JDBC based resource
      ** loaders. If this is a problem, please use a JDK for
      ** building that contains the javax.sql.Datasource class.
      **
      ********************************************************
    </echo>
  </target>

  <target name="check-jdk14">
     <available classname="java.util.logging.Logger"
               property="jdk14.present">
      <classpath refid="velocity.build.classpath"/>
    </available>
  </target>

  <target name="check-jdk14-true" if="jdk14.present">
    <copy todir="${build.src}" filtering="yes">
      <fileset dir="${src.java.dir}">
        <include name="**/JdkLogChute.java"/>
      </fileset>
    </copy>
  </target>

  <target name="check-jdk14-false" unless="jdk14.present">
    <echo level="warning">
      ********************************************************
      **
      ** The java.util.logging.Logger class has not been found on your
      ** classpath. This means that your newly built Velocity jar will
      ** not contain JDK 1.4 compatible logging code. If this is a
      ** problem, please use a 1.4 or newer JDK for building.
      **
      ********************************************************
    </echo>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source tree and the tests                              -->
  <!-- =================================================================== -->
  <target name="compile" depends="compile-src, compile-test"/>

  <target name="compile-src" depends="prepare,check-jdbc,check-jdk14">
    <javac srcdir="${build.src}"
      destdir="${build.dest}"
      encoding="UTF-8"
      debug="${debug}"
      deprecation="${deprecation}"
      optimize="${optimize}">

      <classpath refid="velocity.build.classpath"/>
    </javac>

    <copy todir="${build.dest}" filtering="yes">
      <fileset dir="${src.java.dir}">
        <include name="**/*.properties"/>
      </fileset>
    </copy>

  </target>

  <target name="compile-test" depends="prepare,compile-src">
    <javac srcdir="${build.test.src}"
      destdir="${build.test.dest}"
      encoding="UTF-8"
      debug="${debug}"
      deprecation="${deprecation}"
      optimize="${optimize}">

      <classpath>
        <path refid="velocity.build.classpath"/>
        <pathelement location="${build.dest}"/>
      </classpath>
    </javac>

    <copy todir="${build.test.dest}" filtering="yes">
      <fileset dir="${test.java.dir}">
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Calls jjtree and javacc                                             -->
  <!-- =================================================================== -->
  <target name="parser" depends="parser-check,jjtree,javacc,javacc-cleanup"/>

  <target name="parser-check">
    <condition property="javacc-home-unset">
      <equals arg1="${javacc.home}" arg2="*unset*" />
    </condition>

    <fail if="javacc-home-unset">
      Could not run javacc:
      ***********************************************************
      ** You have not configured your JavaCC installation
      ** location in the javacc.home property.
      ***********************************************************
    </fail>

    <condition property="parser-task-runnable">
      <and>
        <available file="${javacc.home}" type="dir"/>

        <!-- include a list of acceptable ant versions here -->
        <or>
          <contains string="${ant.version}" substring="1.6"/>
        </or>
      </and>
    </condition>

    <fail unless="parser-task-runnable">
      Could not run javacc:
      ***********************************************************
      **
      ** JavaCC 3.1 or later must be installed at ${javacc.home}.
      ** Ant must be at least version 1.6.x.
      **
      ***********************************************************
    </fail>

    <echo>
       ***********************************************************
       ** Creating Parser.jj and Parser.java in source tree.
       **
       ** Note: ASTNode files generated by jjtree are
       ** not generated with this task.  To create new ASTNode files,
       ** run jjtree manually then copy the relevant files into
       ** the runtime/parser/node directory (deleting all other
       ** generated files).
       **
       ***********************************************************
    </echo>
  </target>

  <target name="jjtree" depends="parser-check">
       <echo message="Running JJTree on Parser.jjt"/>
       <delete file="${src.java.dir}/org/apache/velocity/runtime/parser/Parser.jj" />
       <jjtree
                 target="${src.java.dir}/org/apache/velocity/runtime/parser/Parser.jjt"
         outputdirectory="${src.java.dir}/org/apache/velocity/runtime/parser/"
         javacchome="${javacc.home}" buildnodefiles="false" />
  </target>

  <target name="javacc" depends="parser-check">
       <echo message="Running JavaCC on Parser.jj"/>
       <javacc target="${src.java.dir}/org/apache/velocity/runtime/parser/Parser.jj"
       outputdirectory="${src.java.dir}/org/apache/velocity/runtime/parser/"
       javacchome="${javacc.home}" />
  </target>

  <target name="javacc-cleanup" depends="parser-check">
      <delete>
          <fileset dir="${src.java.dir}/org/apache/velocity/runtime/parser/">
              <include name="AST*"/>
              <include name="Node.java"/>
              <include name="SimpleNode.java"/>
              <include name="ParserVisitor.java"/>
          </fileset>
      </delete>
  </target>

  <!-- ================================================================ -->
  <!--   Gets the classes we need from Jakarta Commons collections      -->
  <!-- ================================================================ -->
  <target name="collections-support">
    <unzip src="${collections.jar}" dest="${build.dest}" />

    <!--  we only want a few files -->
    <delete>
      <fileset dir="${build.dest}">
        <include name="org/apache/commons/collections/**/*.class" />
        <exclude name="org/apache/commons/collections/BoundedMap.class" />
        <exclude name="org/apache/commons/collections/ExtendedProperties*.class" />
        <exclude name="org/apache/commons/collections/IterableMap.class" />
        <exclude name="org/apache/commons/collections/iterators/AbstractEmptyIterator.class" />
        <exclude name="org/apache/commons/collections/iterators/EmptyIterator.class" />
        <exclude name="org/apache/commons/collections/iterators/EmptyMapIterator.class" />
        <exclude name="org/apache/commons/collections/iterators/EmptyOrderedIterator.class" />
        <exclude name="org/apache/commons/collections/iterators/EmptyOrderedMapIterator.class" />
        <exclude name="org/apache/commons/collections/KeyValue.class" />
        <exclude name="org/apache/commons/collections/map/AbstractHashedMap*.class" />
        <exclude name="org/apache/commons/collections/map/AbstractLinkedMap*.class" />
        <exclude name="org/apache/commons/collections/map/LRUMap.class" />
        <exclude name="org/apache/commons/collections/MapIterator.class" />
        <exclude name="org/apache/commons/collections/OrderedMap.class" />
        <exclude name="org/apache/commons/collections/OrderedMapIterator.class" />
        <exclude name="org/apache/commons/collections/OrderedIterator.class" />
        <exclude name="org/apache/commons/collections/ResettableIterator.class" />
      </fileset>
    </delete>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar filem              -->
  <!-- including the Oro and logkit dependencies for convenience           -->
  <!-- =================================================================== -->
  <target name="jar-dep" depends="compile, collections-support">

    <unzip src="${log.jar}" dest="${build.dest}"/>
    <unzip src="${oro.jar}" dest="${build.dest}"/>
    <unzip src="${lang.jar}" dest="${build.dest}"/>

    <delete dir="${build.dest}/meta-inf" quiet="true"/>

    <jar jarfile="${build.dir}/${project}-dep-${version}.jar">

      <metainf dir="${velocity.dir}" includes="LICENSE.txt"/>
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Package" value="org.apache.velocity"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Extension-Name" value="${project}"/>
        <attribute name="Specification-Title" value="Velocity is a Java-based template engine" />
        <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Title" value="org.apache.velocity"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file               -->
  <!-- that has no included dependencies                                   -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile">

    <jar jarfile="${build.dir}/${final.name}.jar">

      <metainf dir="${velocity.dir}" includes="LICENSE.txt"/>
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Package" value="org.apache.velocity"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Extension-Name" value="${project}"/>
        <attribute name="Specification-Title" value="Velocity is a Java-based template engine" />
        <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Title" value="org.apache.velocity"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file of all        -->
  <!--  source AND code that requires J2EE (ex. DataSourceResourceLoader)  -->
  <!--  including Oro and LogKit for convenience                           -->
  <!-- =================================================================== -->
<!--
  <target name="jar-J2EE-dep" depends="compile-J2EE, collections-support" if="J2EE.present">

    <unzip src="${log.jar}" dest="${build.dest}"/>
    <unzip src="${oro.jar}" dest="${build.dest}"/>
    <unzip src="${lang.jar}" dest="${build.dest}"/>

    <delete dir="${build.dest}/meta-inf" quiet="true"/>

    <jar jarfile="${build.dir}/${project}-J2EE-dep-${version}.jar">
      <metainf dir="${velocity.dir}" includes="LICENSE.txt"/>
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
      </fileset>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Package" value="org.apache.velocity"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Extension-Name" value="${project}"/>
        <attribute name="Specification-Title" value="Velocity is a Java-based template engine" />
        <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Title" value="org.apache.velocity"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>

  </target>
-->
  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file of all        -->
  <!-- source AND code that requires J2EE (ex. DataSourceResourceLoader)  -->
  <!-- but without built-in dependencies on Oro or Logkit                  -->
  <!-- =================================================================== -->
<!--
  <target name="jar-J2EE" depends="compile-J2EE" if="J2EE.present">

    <jar jarfile="${build.dir}/${project}-J2EE-${version}.jar">
      <metainf dir="${velocity.dir}" includes="LICENSE.txt"/>
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
      </fileset>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Package" value="org.apache.velocity"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Extension-Name" value="${project}"/>
        <attribute name="Specification-Title" value="Velocity is a Java-based template engine" />
        <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Title" value="org.apache.velocity"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>

  </target>
-->

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file               -->
  <!-- =================================================================== -->
  <target name="jar-core" depends="compile">

    <jar compress="true" jarfile="${build.dir}/${project}-core-${version}.jar">
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <exclude name="org/apache/oro/**"/>
        <exclude name="org/apache/velocity/anakia/**"/>
        <exclude name="org/apache/velocity/convert/**"/>
        <exclude name="org/apache/velocity/servlet/**"/>
        <exclude name="org/apache/velocity/texen/**"/>
        <exclude name="org/apache/velocity/test/**"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
    </jar>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file               -->
  <!-- =================================================================== -->
  <target name="jar-util" depends="compile">

    <jar jarfile="${build.dir}/${project}-util-${version}.jar">
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <include name="org/apache/velocity/anakia/**"/>
        <include name="org/apache/velocity/convert/**"/>
        <include name="org/apache/velocity/texen/**"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
    </jar>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file               -->
  <!-- =================================================================== -->
  <target name="jar-servlet" depends="compile">

    <jar jarfile="${build.dir}/${project}-servlet-${version}.jar">
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <include name="org/apache/velocity/servlet/**"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
    </jar>

  </target>

  <!-- ================================================================== -->
  <!-- jars the source                                                    -->
  <!-- ================================================================== -->
  <target name="jar-src"
          depends="prepare"
          description="--> generates the velocity.src.jar file containing source only">
      <jar jarfile="${build.dir}/${final.name}.src.jar"
          basedir="${build.src}"
          excludes="**/package.html"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the example code                                           -->
  <!-- =================================================================== -->
  <target name="examples" depends="jar">

    <echo>
      **************************************************************
      ** Building the examples :
      **   examples/appexample1 : application example
      **   examples/appexample2 : application example
      **   examples/context_example : example context implementations
      **   examples/logger_example : how to make an external logger
      **   examples/xmlapp_example : how to access XML data in a template
      **   examples/event_example : how to use Velocity's event handlers
      **************************************************************
    </echo>

    <javac srcdir="${example.dir}/app_example1
                  :${example.dir}/app_example2
                  :${example.dir}/context_example
                  :${example.dir}/logger_example
                  :${example.dir}/xmlapp_example
                  :${example.dir}/event_example"
      encoding="UTF-8"
      debug="${debug}"
      deprecation="${deprecation}"
      optimize="${optimize}">

      <classpath>
        <path refid="velocity.build.classpath"/>
        <pathelement location="${build.dest}"/>
      </classpath>

    </javac>

  </target>

  <target name="examples-clean-all" depends="examples-clean-anakia">
    <delete quiet="true">
      <fileset dir="${example.dir}" includes="**/*.class">
        <include name="**/*.log"/>
      </fileset>
    </delete>
  </target>

  <target name="examples-clean-anakia">
    <delete dir="${example.dir}/anakia/docs" quiet="true"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare">

    <mkdir dir="${build.javadoc}"/>

    <javadoc
      sourcepath="${build.src}"
      packagenames="org.apache.velocity.*"
      destdir="${build.javadoc}"
      author="true"
      private="true"
      version="true"
      use="true"
      windowtitle="${name} ${version} API"
      doctitle="${name} ${version} API"
      encoding="UTF-8"
      docencoding="UTF-8"
      bottom="Copyright &#169; 2000-${build.year} Apache Software Foundation. All Rights Reserved.">

      <classpath refid="velocity.build.classpath"/>

    </javadoc>
  </target>

  <target name="javadocs-clean">
    <delete dir="${build.javadoc}" quiet="true"/>
  </target>

  <!-- =================================================================== -->
  <!-- Package                                                             -->
  <!-- =================================================================== -->
  <target name="package" depends="javadocs-clean,
                               examples-clean-anakia,
                               test-clean,clean,jar,jar-dep,javadocs">

    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/src/java"/>

    <copy todir="${dist.dir}/src/java/">
      <fileset dir="${build.dir}/src/">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/build">
      <fileset dir="${velocity.dir}/build">
        <include name="**"/>
        <exclude name="velocity.log"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/convert">
      <fileset dir="${velocity.dir}/convert">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${docs.dest}">
      <fileset dir="${velocity.dir}/docs">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/examples">
      <fileset dir="${example.dir}">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/src">
      <fileset dir="${velocity.dir}/src">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/test">
      <fileset dir="${velocity.dir}/test">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/xdocs">
      <fileset dir="${docs.src}">
        <include name="**"/>
      </fileset>
    </copy>

    <copy
      file="${velocity.dir}/LICENSE.txt"
      tofile="${dist.dir}/LICENSE.txt"
    />

    <copy
      file="${velocity.dir}/README.txt"
      tofile="${dist.dir}/README.txt"
    />

    <copy
      file="${build.dir}/${final.name}.jar"
      tofile="${dist.dir}/${final.name}.jar"
    />

    <copy
      file="${build.dir}/${project}-dep-${version}.jar"
      tofile="${dist.dir}/${project}-dep-${version}.jar"
    />

    <fixcrlf srcdir="${dist.dir}"
       eol="crlf"
       eof="asis"
       includes="**/*.wm, **/*.txt, **/*.xml,
                 **/*.java, **/*.properties"
    />
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with Jar                                 -->
  <!-- ================================================================== -->
  <target name="package-jar"
          depends="package"
          description="--> generates the .jar file">
      <delete file="${build.dir}/${final.name}.jar" quiet="true"/>

      <jar
          jarfile="${build.dir}/${final.name}.jar"
          basedir="${dist.root}"
          excludes="**/package.html"
      />
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with ZIP                                 -->
  <!-- ================================================================== -->
  <target name="package-zip"
          depends="package"
          description="--> generates the distribution as .zip">
      <delete file="${build.dir}/${final.name}.zip" quiet="true"/>
      <zip zipfile="${build.dir}/${final.name}.zip" basedir="${dist.root}"
           includes="**/${final.name}/**"/>
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with TAR-GZIP                            -->
  <!-- ================================================================== -->
  <target name="package-tgz"
          depends="package"
          description="--> generates the distribution as .tar.gz">
      <delete file="${build.dir}/${final.name}.tar" quiet="true"/>
      <delete file="${build.dir}/${final.name}.tar.gz" quiet="true"/>
      <tar tarfile="${build.dir}/${final.name}.tar" basedir="${dist.root}"
           includes="**/${final.name}/**" longfile="gnu"/>
      <gzip zipfile="${build.dir}/${final.name}.tar.gz" src="${build.dir}/${final.name}.tar"/>
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with ZIP and TAG-GZIP                    -->
  <!-- ================================================================== -->
  <target name="package-all"
          depends="package-zip, package-tgz"
          description="--> generates the .tar.gz and .zip distributions">
  </target>

  <!-- ================================================================== -->
  <!-- Same as package-all. It is just here for compatibility.            -->
  <!-- ================================================================== -->
  <target name="dist" depends="package-all">
    <delete dir="${dist.root}" quiet="true"/>
  </target>

  <!-- ================================================================== -->
  <!-- I N S T A L L  J A R                                               -->
  <!-- ================================================================== -->
  <target name="install-jar" depends="jar"
          description="--> Installs .jar file in ${lib.repo}">
    <copy todir="${lib.repo}" filtering="no">
      <fileset dir="${build.dir}">
        <include name="${final.name}.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up the build directory                                       -->
  <!-- =================================================================== -->
  <target name="clean">
    <delete dir="${build.dir}" quiet="true"/>
  </target>

  <!-- =================================================================== -->
  <!-- Make HTML version of Velocity documentation                         -->
  <!-- =================================================================== -->

  <target name="docs"
          depends="jar"
          description="generates the HTML documentation"
          >
      <taskdef name="anakia"
          classname="org.apache.velocity.anakia.AnakiaTask">

          <classpath>
             <pathelement location="${build.dir}/${final.name}.jar"/>
             <path refid="velocity.build.classpath"/>
          </classpath>

      </taskdef>

      <echo>
       #######################################################
       #
       #  Now using Anakia to transform our XML documentation
       #  to HTML.
       #
       #  using project file: ${docs.project}
       #
       #  Note: set property "docs.project" to "project.xml"
       #  for distribution and "project-website.xml" for
       #  website.
       #######################################################
      </echo>

      <anakia basedir="${docs.src}" destdir="${docs.dest}/"
           extension=".html" style="site.vsl"
           projectFile="stylesheets/${docs.project}"
           excludes="**/stylesheets/** empty.xml"
           includes="**/*.xml"
           lastModifiedCheck="true"
           templatePath="${xdocs.dir}/stylesheets">
      </anakia>

      <copy todir="${docs.dest}/images" filtering="no">
          <fileset dir="${docs.src}/images">
              <include name="**/*.gif"/>
              <include name="**/*.jpeg"/>
              <include name="**/*.jpg"/>
              <include name="**/*.png"/>
          </fileset>
      </copy>

      <copy todir="${docs.dest}" filtering="no">
          <fileset dir="${docs.src}">
              <include name="**/*.css"/>
              <include name="**/.htaccess"/>
          </fileset>
      </copy>

  </target>


  <!-- =================================================================== -->
  <!-- Cleans up the docs directory                                       -->
  <!-- =================================================================== -->
  <target name="docs-clean">
    <delete dir="${docs.dest}" quiet="true"/>
  </target>


  <!-- =================================================================== -->
  <!-- JUnit Tests for Velocity                                            -->
  <!-- =================================================================== -->
   <target name="test"
            depends="compile, junittest"
            description="--> Run the testcases">
        <ant antfile="${velocity.build.dir}/testcases.xml" target="test-all"/>
   </target>

    <target name="junittest" depends="compile"
                 description="Run non-legacy unit test cases">

        <mkdir dir="${build.test.reports}"/>
        <junit dir="${velocity.dir}" printSummary="yes" fork="true" haltonerror="${test.haltonerror}" haltonfailure="${test.haltonfailure}">

          <classpath>
            <fileset dir="${velocity.lib.dir}">
              <include name="*.jar"></include>
            </fileset>
            <path refid="velocity.build.classpath" />
            <pathelement path="${build.dest}"/>
            <pathelement path="${build.test.dest}"/>
          </classpath>

          <batchtest todir="${build.test.reports}">
            <fileset dir="${test.java.dir}">
                <include name="**/*TestCase.java"></include>

                <exclude name="**/BaseTestCase.java"></exclude>

                <exclude name="**/TexenTestCase.java"></exclude>
                <exclude name="**/TexenClasspathTestCase.java"></exclude>
                <exclude name="**/AnakiaTestCase.java"></exclude>
                <exclude name="**/MultiLoaderTestCase.java"></exclude>
                <exclude name="**/ClasspathResourceTestCase.java"></exclude>
            </fileset>
          </batchtest>
          <formatter type="plain"/>
        </junit>
    </target>

   <target name="test-clean"
            description="--> Cleanup after the testcases">
        <ant antfile="${velocity.build.dir}/testcases.xml"
             target="test-clean"/>
   </target>

  <!-- Delete the demo files for re-build -->
  <target name="cleandemo">
    <delete dir="${demo.dest}/org" quiet="true"/>
  </target>

</project>
