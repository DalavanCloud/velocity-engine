<?xml version="1.0"?>

<!-- Build file for Velocity -->

<project name="Velocity" default="jar" basedir="..">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it -->
  <property file="${user.home}/.ant.properties" />
  <property file="${user.home}/build.properties" />
  <property file=".ant.properties" />

  <property name="Name" value="Velocity"/>
  <property name="version" value="1.5-dev"/>
  
  <property name="project" value="velocity"/>
  <property name="velocity.dir" value="." />  
  <property name="velocity.build.dir" value="build" />  
  <property name="build.dir" value="${velocity.dir}/bin"/>
  <property name="build.src" value="${build.dir}/src"/>
  <property name="build.dest" value="${build.dir}/classes"/>
    
  <property name="example.dir" value="${velocity.dir}/examples"/>

  <property name="src.java.dir" value="${velocity.dir}/src/java"/>
  <property name="test.java.dir" value="${velocity.dir}/src/test"/>
  <property name="javadoc.destdir" value="${velocity.dir}/docs/docs/api"/>
  <property name="final.name" value="${project}-${version}"/>
  <property name="dist.root" value="${velocity.dir}/dist"/>
  <property name="dist.dir" value="${dist.root}/${final.name}"/>
  <property name="year" value="2005"/>

  <property name="debug" value="on"/>
  <property name="optimize" value="on"/>
  <property name="deprecation" value="off"/>

  <property name="docs.dest" value="${velocity.dir}/docs"/>
  <property name="docs.src" value="${velocity.dir}/xdocs"/>

  <!-- set to "project" for distribution and "project-website" -->
  <!-- when building docs for web site -->
  <property name="docs.project" value="project.xml"/>

  <!-- jars explicitly needed for bulding 'dep jar' -->    
  <property name="log.jar" value="${velocity.build.dir}/lib/logkit-1.0.1.jar"/>
  <property name="oro.jar" value="${velocity.build.dir}/lib/oro.jar"/>
  <property name="collections.jar" value="${velocity.build.dir}/lib/commons-collections-3.1.jar" />
  <property name="lang.jar" value="${velocity.build.dir}/lib/commons-lang-2.1.jar" />

  <!-- PDF generation using FOP -->
  <property name="xdocs.dir" value="${velocity.dir}/xdocs"/>
  <property name="allfiles.xml" value="velocity-doc.xml"/>
  <property name="outfile.fo" value="velocity.fo"/>
  <property name="outfile.pdf" value="${velocity.dir}/docs/velocity.pdf"/>

  <property 
    name="default.texen.properties"
    value="org/apache/velocity/texen/defaults/texen.properties"
  />

  <property 
    name="runtime.defaults.dir" 
    value="org/apache/velocity/runtime/defaults"
  />


  <!-- Needs to be configured with system location of javacc for parser task -->
  <property name="javacc.home" value="/javacc-3.2"/>


  <!-- disabled for now == classpath issues
    <taskdef name="fop" classname="Fop"/>
    <taskdef name="xslt" classname="Xslt"/>
  -->

  <!-- Build classpath -->
  <path id="classpath">
    <fileset dir="${velocity.build.dir}/lib">
      <include name="**/*.jar"/>
    </fileset>
  </path>


  <!-- =================================================================== -->
  <!-- prints the targets available in this build file                     -->
  <!-- =================================================================== -->
  <target name="help">
    
    <echo>
  ****************************************************************************
  ** 
  **  Help for Velocity build file
  **
  **  Target         Depends on          Description
  **                                     default - see jar
  **  env                                echos environment variables to screen
  **  prepare        env                 creates build dir, copies source
  **  J2EE-error     prepare             message if J2EE missing but required
  **  parser         env                 calls jjtree and javacc 
  **                                     (requires javaCC 3.1+ and ant 1.6.x)
  **  compile        prepare             compiles non-J2EE source
  **  compile-J2EE   prepare, J2EE-error compiles J2EE source
  **  compile-copy                       move non-J2EE classes out of the way.
  **  jar            compile             prepares {project}-{version} jar file. Note
  **                                     that nothing except Velocity code is included
  **                                     dependencies are separate.
  **  jar-dep        compile             Same as 'jar', but includes Oro and Logkit
  **                                     dependencies for convenience.
  **  jar-J2EE       compile-J2EE        prepares jar including J2EE
  **  jar-J2EE-dep   compile-J2EE        same as 'jar-J2EE', but with Oro and
  **                                     Logkit dependencies for convenience
  **  jar-core       compile             prepares jar with only core classes
  **  jar-util       compile             prepares jar with only util classes
  **  jar-servlet    compile             prepares jar with only servlet classes
  **  jar-src                            prepares jar of source
  **  examples       jar                 compiles examples 
  **  examples-clean-anakia              cleans anakia example
  **  examples-clean-all                 cleans the anakia example
  **  javadocs       prepare             build javadocs
  **  javadocs-clean                     delete javadocs
  **  docs           jar                 Generates Velocity Documentation
  **  docs-clean                         Cleans generated Velocity Documentation
  **  test           compile             runs JUnit tests
  **  test-clean                         deletes test results
  **  clean                              deletes build dir
  ***************************************************************************
    </echo>
  
  </target>
  <!-- =================================================================== -->
  <!-- prints the environment                                              -->
  <!-- =================================================================== -->
  <target name="env">
    
    <echo message="java.home = ${java.home}"/>
    <echo message="user.home = ${user.home}"/>
    <echo message="java.class.path = ${java.class.path}"/>
    <echo message=""/>
  
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="env">
    
    <tstamp/>
    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${DSTAMP}"/>        

    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.src}"/>

    <copy todir="${build.src}" filtering="yes">
      <fileset dir="${src.java.dir}"> 
        <include name="**/*.java"/>
      </fileset>
    </copy>

      <copy todir="${build.src}" filtering="yes">
        <fileset dir="${test.java.dir}">
          <include name="**/*.java"/>
        </fileset>
      </copy>

    <!--  note: check to see if required class is available.  -->
    <!-- might be j2ee.jar, jdbc2_0-stdext.jar, or simply JDK 1.4+ -->
    <available  classname="javax.sql.DataSource"
       property="J2EE.present">
       <classpath refid = "classpath"/> 
     </available>

  </target>

  <target name="J2EE-error" depends="prepare"  unless="J2EE.present">
        <echo>
           ********************************************************
           **
           **  J2EE has not been found and is needed for the target
           **  you have chosen
           **
           **  Since CLASSPATH is an evil idea, just link or drop
           **  a copy of your j2ee.jar into build/lib directory.
           **
           *********************************************************
        </echo>
  </target>


  <!-- =================================================================== -->
  <!-- Calls jjtree and javacc                                             -->
  <!-- =================================================================== -->
  <target name="parser" depends="env">
        <echo>
           ***********************************************************
           ** Creating Parser.jj and Parser.java in source tree.     
           **                                                        
           ** Note: ASTNode files generated by jjtree are            
           ** not generated with this task.  To create new ASTNode files,   
           ** run jjtree manually then copy the relevant files into  
           ** the runtime/parser/node directory (deleting all other 
           ** generated files).                     
           **                                   
           ***********************************************************
         </echo>
         
         <echo message="This task requires javacc 3.1+ and ant 1.6.x to be installed."/>
         <echo message="Checking javcc.home='${javacc.home}' and ant.version='${ant.version}'."/>

         <condition property="parser-task-runnable">
            <and>
              <available file="${javacc.home}" type="dir"/>
              
              <!-- include a list of acceptable ant versions here -->
              <or>
                  <contains string="${ant.version}" substring="1.6"/>
              </or>
            </and>
          </condition>

         <antcall target="jjtree" />
         <antcall target="javacc" />
         <antcall target="javacc-cleanup" />
         <antcall target="javacc-missing" />
         
   </target>
   
   
   <target name="jjtree" if="parser-task-runnable">   
        <echo message="Running JJTree on Parser.jjt"/>        
        <jjtree 
		  target="${src.java.dir}/org/apache/velocity/runtime/parser/Parser.jjt" 
          outputdirectory="${src.java.dir}/org/apache/velocity/runtime/parser/" 
          javacchome="${javacc.home}" buildnodefiles="false" />   
   </target>
         
   <target name="javacc" if="parser-task-runnable">   
        <echo message="Running JavaCC on Parser.jj"/>
        <javacc target="${src.java.dir}/org/apache/velocity/runtime/parser/Parser.jj" 
        outputdirectory="${src.java.dir}/org/apache/velocity/runtime/parser/" 
        javacchome="${javacc.home}" />   
   </target>

   <target name="javacc-cleanup" if="parser-task-runnable">   
       <delete>
           <fileset dir="${src.java.dir}/org/apache/velocity/runtime/parser/">  
               <include name="AST*"/>
               <include name="Node.java"/>
               <include name="SimpleNode.java"/>
               <include name="ParserVisitor.java"/>
           </fileset>
       </delete>
   </target>
                           
   <target name="javacc-missing" unless="parser-task-runnable">
        <echo message="Couldn't run javacc."/>
		<echo message="JavaCC 3.1+ must be installed at ${javacc.home}."/>
		<echo message="Ant must be version 1.6.x."/>
   </target>


  <!-- =================================================================== -->
  <!-- Compiles the source directory without the J2EE dependent files      -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare">
      
    <javac srcdir="${build.src}"
      destdir="${build.dest}"
      debug="${debug}"
      deprecation="${deprecation}"
      optimize="${optimize}">

      <exclude  name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java"/>
      
      <classpath refid="classpath"/>
    </javac>
            
    <antcall target="compile-copy"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory with the J2EE dependent files         -->
  <!-- =================================================================== -->
  <target name="compile-J2EE" depends="prepare, J2EE-error" if="J2EE.present">
      
    <javac srcdir="${build.src}"
      destdir="${build.dest}"
      debug="${debug}"
      deprecation="${deprecation}"
      optimize="${optimize}">
      
      <classpath refid="classpath"/>
    </javac>
            
    <antcall target="compile-copy"/>

  </target>

  <!-- ====================================================================== -->
  <!-- copies post-compile target files to the right place.  (This target     -->
  <!-- created to prevent compile and compile-J2EE from repeating code...     -->
  <!-- ====================================================================== -->
  <target name="compile-copy">

    <copy todir="${build.dest}/org/apache/velocity">
      <fileset dir="${src.java.dir}/org/apache/velocity">
        <include name="**/*.class"/>
      </fileset>
    </copy>
            
    <copy todir="${build.dest}/${runtime.defaults.dir}">
      <fileset dir="${src.java.dir}/${runtime.defaults.dir}">
        <include name="*"/>
      </fileset>
    </copy>

    <copy 
      file="${src.java.dir}/${default.texen.properties}"
      tofile="${build.dest}/${default.texen.properties}"
    />

  </target>


  <!-- ================================================================ -->
  <!--   Gets the classes we need from Jakarta Commons collections      -->
  <!-- ================================================================ -->
  <target name="collections-support">

    <unzip src="${collections.jar}" dest="${build.dest}" />

    <!--  we only want one file right now, the ExtendedProperties -->
    <!--  keep jars svelte...                                     -->
 
    <delete>
       <fileset dir="${build.dest}">
          <include name="org/apache/commons/collections/*.class" />
          <exclude name="org/apache/commons/collections/LRUMap.class" />
          <exclude name="org/apache/commons/collections/ExtendedProperties*.class" />
       </fileset>
    </delete>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar filem              -->
  <!-- including the Oro and logkit dependencies for convenience           -->
  <!-- =================================================================== -->
  <target name="jar-dep" depends="compile, collections-support">
         
    <unzip src="${log.jar}" dest="${build.dest}"/>
    <unzip src="${oro.jar}" dest="${build.dest}"/>
    <unzip src="${lang.jar}" dest="${build.dest}"/>
 
    <delete dir="${build.dest}/meta-inf" quiet="true"/>

    <jar jarfile="${build.dir}/${project}-dep-${version}.jar">

      <metainf dir="${velocity.dir}" includes="LICENSE.txt"/>
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Package" value="org.apache.velocity"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Extension-Name" value="${project}"/>
        <attribute name="Specification-Title" value="Velocity is a Java-based template engine" />
        <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Title" value="org.apache.velocity"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>
  
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file               -->
  <!-- that has no included dependencies                                   -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile">
         
    <jar jarfile="${build.dir}/${project}-${version}.jar">

      <metainf dir="${velocity.dir}" includes="LICENSE.txt"/>
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Package" value="org.apache.velocity"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Extension-Name" value="${project}"/>
        <attribute name="Specification-Title" value="Velocity is a Java-based template engine" />
        <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Title" value="org.apache.velocity"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>
  
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file of all        -->
  <!--  source AND code that requires J2EE (ex. DataSourceResourceLoader)  -->
  <!--  including Oro and LogKit for convenience                           -->
  <!-- =================================================================== -->
  <target name="jar-J2EE-dep" depends="compile-J2EE, collections-support" if="J2EE.present">
        
    <unzip src="${log.jar}" dest="${build.dest}"/>
    <unzip src="${oro.jar}" dest="${build.dest}"/>
    <unzip src="${lang.jar}" dest="${build.dest}"/>

    <delete dir="${build.dest}/meta-inf" quiet="true"/>

    <jar jarfile="${build.dir}/${project}-J2EE-dep-${version}.jar">
      <metainf dir="${velocity.dir}" includes="LICENSE.txt"/>
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
      </fileset>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Package" value="org.apache.velocity"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Extension-Name" value="${project}"/>
        <attribute name="Specification-Title" value="Velocity is a Java-based template engine" />
        <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Title" value="org.apache.velocity"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>
  
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file of all        -->
  <!-- source AND code that requires J2EE (ex. DataSourceResourceLoader)  -->
  <!-- but without built-in dependencies on Oro or Logkit                  -->
  <!-- =================================================================== -->
  <target name="jar-J2EE" depends="compile-J2EE" if="J2EE.present">
        
    <jar jarfile="${build.dir}/${project}-J2EE-${version}.jar">
      <metainf dir="${velocity.dir}" includes="LICENSE.txt"/>
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
      </fileset>
      <manifest>
        <attribute name="Created-By" value="Apache Ant"/>
        <attribute name="Package" value="org.apache.velocity"/>
        <attribute name="Build-Jdk" value="${java.version}"/>
        <attribute name="Extension-Name" value="${project}"/>
        <attribute name="Specification-Title" value="Velocity is a Java-based template engine" />
        <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Title" value="org.apache.velocity"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>
  
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file               -->
  <!-- =================================================================== -->
  <target name="jar-core" depends="compile">
        
    <jar compress="true" jarfile="${build.dir}/${project}-core-${version}.jar">
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <exclude name="org/apache/oro/**"/>
        <exclude name="org/apache/velocity/anakia/**"/>
        <exclude name="org/apache/velocity/convert/**"/>
        <exclude name="org/apache/velocity/servlet/**"/>
        <exclude name="org/apache/velocity/texen/**"/>
        <exclude name="org/apache/velocity/test/**"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
    </jar>
  
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file               -->
  <!-- =================================================================== -->
  <target name="jar-util" depends="compile">
        
    <jar jarfile="${build.dir}/${project}-util-${version}.jar">
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <include name="org/apache/velocity/anakia/**"/>
        <include name="org/apache/velocity/convert/**"/>
        <include name="org/apache/velocity/texen/**"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
    </jar>
  
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory and creates a .jar file               -->
  <!-- =================================================================== -->
  <target name="jar-servlet" depends="compile">
        
    <jar jarfile="${build.dir}/${project}-servlet-${version}.jar">
      <fileset dir="${build.dest}">
        <exclude name="**/package.html"/>
        <include name="org/apache/velocity/servlet/**"/>
        <exclude name="org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.class"/>
      </fileset>
    </jar>
  
  </target>

  <!-- ================================================================== -->
  <!-- jars the source                                                    -->
  <!-- ================================================================== -->
  <target name="jar-src"
          depends="prepare"
          description="--> generates the velocity.src.jar file containing source only">
      <jar jarfile="${build.dir}/${final.name}.src.jar"
          velocity.dir="${build.src}"
          excludes="**/package.html"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the example code                                           -->
  <!-- =================================================================== -->
  <target name="examples" depends="jar">
        
    <echo>
      **************************************************************
      ** Building the examples :
      **   examples/appexample1 : application example
      **   examples/appexample2 : application example
      **   examples/context_example : example context implementations
      **   examples/logger_example : how to make an external logger
      **   examples/xmlapp_example : how to access XML data in a template
      **   examples/event_example : how to use Velocity's event handlers
      **************************************************************
    </echo>

    <javac srcdir="${example.dir}/app_example1
                  :${example.dir}/app_example2
                  :${example.dir}/context_example
                  :${example.dir}/logger_example
                  :${example.dir}/xmlapp_example
                  :${example.dir}/event_example"
      debug="${debug}"
      deprecation="${deprecation}"
      optimize="${optimize}">

      <classpath>
        <path refid="classpath"/>
        <pathelement location="${build.dest}"/>
      </classpath>
      
    </javac>

  </target>

  <target name="examples-clean-all" depends="examples-clean-anakia">
    <delete quiet="true">
      <fileset dir="${example.dir}" includes="**/*.class">
        <include name="**/*.log"/>
      </fileset>
    </delete>
  </target>

  <target name="examples-clean-anakia">
    <delete dir="${example.dir}/anakia/docs" quiet="true"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare">
    
    <mkdir dir="${javadoc.destdir}"/>
    
    <javadoc
      sourcepath="${build.src}"
      packagenames="org.apache.velocity.*"
      destdir="${javadoc.destdir}"
      author="true"
      private="true"
      version="true"
      use="true"
      windowtitle="${Name} ${version} API"
      doctitle="${Name} ${version} API"
      bottom="Copyright &#169; ${year} Apache Software Foundation. All Rights Reserved.">
      
      <classpath refid="classpath"/> 
      
    </javadoc>
  </target>

  <target name="javadocs-clean">
    <delete dir="${javadoc.destdir}" quiet="true"/>
  </target>
    
  <!-- =================================================================== -->
  <!-- Package                                                             -->
  <!-- =================================================================== -->
  <target name="package" depends="javadocs-clean,
                               examples-clean-anakia,
                               test-clean,clean,jar,jar-dep,javadocs">
        
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/src/java"/>

    <copy todir="${dist.dir}/src/java/">
      <fileset dir="${build.dir}/src/">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/build">
      <fileset dir="${velocity.dir}/build">
        <include name="**"/>
        <exclude name="velocity.log"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/convert">
      <fileset dir="${velocity.dir}/convert">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${docs.dest}">
      <fileset dir="${velocity.dir}/docs">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/examples">
      <fileset dir="${example.dir}">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/src">
      <fileset dir="${velocity.dir}/src">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/test">
      <fileset dir="${velocity.dir}/test">
        <include name="**"/>
      </fileset>
    </copy>

    <copy todir="${dist.dir}/xdocs">
      <fileset dir="${docs.src}">
        <include name="**"/>
      </fileset>
    </copy>

    <copy 
      file="${velocity.dir}/LICENSE.txt" 
      tofile="${dist.dir}/LICENSE.txt"
    />

    <copy 
      file="${velocity.dir}/README.txt" 
      tofile="${dist.dir}/README.txt"
    />
    
    <copy 
      file="${build.dir}/${final.name}.jar" 
      tofile="${dist.dir}/${final.name}.jar"
    />

    <copy
      file="${build.dir}/${project}-dep-${version}.jar"
      tofile="${dist.dir}/${project}-dep-${version}.jar"
    />

    <fixcrlf srcdir="${dist.dir}"
       eol="crlf"
       eof="asis"
       includes="**/*.wm, **/*.txt, **/*.xml, 
                 **/*.java, **/*.properties"
    />    
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with Jar                                 -->
  <!-- ================================================================== -->
  <target name="package-jar"
          depends="package"
          description="--> generates the .jar file">
      <delete file="${velocity.dir}/${final.name}.jar" quiet="true"/>

      <jar 
          jarfile="${velocity.dir}/${final.name}.jar" 
          velocity.dir="${dist.root}"
          excludes="**/package.html"
      />
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with ZIP                                 -->
  <!-- ================================================================== -->
  <target name="package-zip"
          depends="package"
          description="--> generates the distribution as .zip">
      <delete file="${velocity.dir}/${final.name}.zip" quiet="true"/>
      <zip zipfile="${velocity.dir}/${final.name}.zip" velocity.dir="${dist.root}" 
           includes="**/${final.name}/**"/>
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with TAR-GZIP                            -->
  <!-- ================================================================== -->
  <target name="package-tgz"
          depends="package"
          description="--> generates the distribution as .tar.gz">
      <delete file="${velocity.dir}/${final.name}.tar" quiet="true"/>
      <delete file="${velocity.dir}/${final.name}.tar.gz" quiet="true"/>
      <tar tarfile="${velocity.dir}/${final.name}.tar" velocity.dir="${dist.root}" 
           includes="**/${final.name}/**" longfile="gnu"/>
      <gzip zipfile="${velocity.dir}/${final.name}.tar.gz" src="${velocity.dir}/${final.name}.tar"/>
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with ZIP and TAG-GZIP                    -->
  <!-- ================================================================== -->
  <target name="package-all"
          depends="package-zip, package-tgz"
          description="--> generates the .tar.gz and .zip distributions">
  </target>

  <!-- ================================================================== -->
  <!-- Same as package-all. It is just here for compatibility.            -->
  <!-- ================================================================== -->
  <target name="dist" depends="package-all">
    <delete dir="${dist.root}" quiet="true"/>
  </target>

  <!-- ================================================================== -->
  <!-- I N S T A L L  J A R                                               -->
  <!-- ================================================================== -->
  <target name="install-jar" depends="jar"
          description="--> Installs .jar file in ${lib.repo}">
    <copy todir="${lib.repo}" filtering="no">
      <fileset dir="${build.dir}">
        <include name="${final.name}.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up the build directory                                       -->
  <!-- =================================================================== -->
  <target name="clean">
    <delete dir="${build.dir}" quiet="true"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Make HTML version of Velocity documentation                         -->
  <!-- =================================================================== -->

  <target name="docs" 
          depends="jar"
          description="generates the HTML documentation"
          >
      <taskdef name="anakia"
          classname="org.apache.velocity.anakia.AnakiaTask">
          
          <classpath>
             <pathelement location="${build.dir}/${project}-${version}.jar"/>
             <path refid="classpath"/>
          </classpath>

      </taskdef>

      <echo>
       #######################################################
       #
       #  Now using Anakia to transform our XML documentation
       #  to HTML.  
       #
       #  using project file: ${docs.project}
       #
       #  Note: set property "docs.project" to "project.xml"
       #  for distribution and "project-website.xml" for
       #  website.
       #######################################################
      </echo>

      <anakia velocity.dir="${docs.src}" destdir="${docs.dest}/"
           extension=".html" style="site.vsl"
           projectFile="stylesheets/${docs.project}"
           excludes="**/stylesheets/** empty.xml"
           includes="**/*.xml"
           lastModifiedCheck="true"
           templatePath="${velocity.dir}/xdocs/stylesheets">
      </anakia>

      <copy todir="${docs.dest}/images" filtering="no">
          <fileset dir="${docs.src}/images">
              <include name="**/*.gif"/>
              <include name="**/*.jpeg"/>
              <include name="**/*.jpg"/>
              <include name="**/*.png"/>
          </fileset>
      </copy>
  
      <copy todir="${docs.dest}" filtering="no">
          <fileset dir="${docs.src}">
              <include name="**/*.css"/>
              <include name="**/.htaccess"/>
          </fileset>
      </copy>

  </target>
  
  
  <!-- =================================================================== -->
  <!-- Cleans up the docs directory                                       -->
  <!-- =================================================================== -->
  <target name="docs-clean">
    <delete dir="${docs.dest}" quiet="true"/>
  </target>


  <!-- =================================================================== -->
  <!-- Make PDF version of Velocity documentation                          -->
  <!-- =================================================================== -->
  <!--    
  <target name="pdf">
    <xslt 
      infile="${velocity.dir}/xdocs/site-book.xml" 
      xsltfile="${velocity.build.dir}/xsl/xml2xml.xsl"
      outfile="${allfiles.xml}" 
      smart="yes"
    />
    
    <xslt 
      infile="${allfiles.xml}" 
      xsltfile="${velocity.build.dir}/xsl/xml2pdf.xsl"
      outfile="${outfile.fo}" 
      smart="yes"
    />
    
    <fop 
      fofile="${outfile.fo}" 
      pdffile="${outfile.pdf}"
    /> 
        
    <delete file="${allfiles.xml}"/>
    <delete file="${outfile.fo}"/>
  
  </target>
  -->
    
  <!-- =================================================================== -->
  <!-- JUnit Tests for Velocity                                            -->
  <!-- =================================================================== -->
   <target name="test"
            depends="compile, junittest"
            description="--> Run the testcases">
        <ant antfile="${velocity.build.dir}/testcases.xml" target="test-all"/>
   </target>

    <target name="junittest" depends="compile"
                 description="Run non-legacy unit test cases">

        <mkdir dir="${velocity.dir}/target/test-reports"/>
        <junit dir="${velocity.dir}" printSummary="yes" fork="true" haltonerror="true">

          <sysproperty key="velocity.dir" value="${velocity.dir}"></sysproperty>

          <classpath>
            <fileset dir="${velocity.build.dir}/lib">
              <include name="*.jar"></include>
            </fileset>
            <pathelement path="${build.dest}"></pathelement>
          </classpath>

          <batchtest todir="${velocity.dir}/target/test-reports">
            <fileset dir="${test.java.dir}">
                <include name="**/*TestCase.java"></include>

                <exclude name="**/BaseTestCase.java"></exclude>

                <exclude name="**/TexenTestCase.java"></exclude>
                <exclude name="**/TexenClasspathTestCase.java"></exclude>
                <exclude name="**/AnakiaTestCase.java"></exclude>
                <exclude name="**/MultiLoaderTestCase.java"></exclude>
                <exclude name="**/ClasspathResourceTestCase.java"></exclude>
            </fileset>
          </batchtest>
          <formatter type="plain"/>
        </junit>
    </target>

   <target name="test-clean"
            description="--> Cleanup after the testcases">
        <ant antfile="testcases.xml" target="test-clean"/>
   </target>

  <!-- Delete the demo files for re-build -->
  <target name="cleandemo">
    
    <delete dir="${demo.dest}/org" quiet="true"/>
    
  </target>
    
</project>

