/* Generated By:JJTree: Do not edit this line. ASTReference.java */

package org.apache.velocity.runtime.parser;

import java.io.Writer;
import java.io.IOException;

import java.util.Map;

import org.apache.velocity.Context;
import org.apache.velocity.runtime.Runtime;
import org.apache.velocity.util.ClassUtils;

public class ASTReference extends SimpleNode
{
    private String nullString;

    public ASTReference(int id)
    {
        super(id);
    }

    public ASTReference(Parser p, int id)
    {
        super(p, id);
    }

    /** Accept the visitor. **/
    public Object jjtAccept(ParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public void render(Context context, Writer writer)
        throws IOException
    {
        Object value = value(context);
        
        if (value == null)
            writer.write(NodeUtils
                .specialText(getFirstToken()) + 
                    nullString);
        else
            writer.write(NodeUtils
                .specialText(getFirstToken()) + 
                    value(context).toString());
    }

    public boolean evaluate(Context context)
    {
        Object o = value(context);
        if (o == null)
            return false;
        else if (o instanceof Boolean)
        {
            if (((Boolean) o).booleanValue())
                return true;
            else
                return false;
        }
        else
            return true;
    }

    public Object value(Context context)
    {
        // The rootOfIntrospection is the object we will
        // retrieve from the Context. This is the base
        // object we will apply reflection to.
        String root = getRoot();
        Object result = getVariableValue(context, root);
        
        if (result == null)
        {
            Runtime.error("Reference error: " + root + " " +
                          "not defined in the context.");
            
            return null;
        }                          
        
        // How many child nodes do we have?
        int children = jjtGetNumChildren();
        
        for (int i = 0; i < children; i++)
            result = jjtGetChild(i).invoke(result, context);

        return result;
    }

    public void setValue(Context context, Object value)
    {
        // The rootOfIntrospection is the object we will
        // retrieve from the Context. This is the base
        // object we will apply reflection to.
        String root = getRoot();
        Object result = getVariableValue(context, root);
        
        if (result == null)
        {
            Runtime.error("Reference error: " + root + " " +
                          "not defined in the context.");
        }                          
        
        // How many child nodes do we have?
        int children = jjtGetNumChildren();
        
        for (int i = 0; i < children - 1; i++)
            result = jjtGetChild(i).invoke(result, context);

        Object[] args = { value };
        ClassUtils.invoke(result, "set" + jjtGetChild(children - 1)
            .getFirstToken().image, args);
    }

    private String getRoot()
    {
        Token t = getFirstToken();
        
        if (t.image.equals("$!"))
        {
            nullString = "";
            
            if (t.next.image.equals("{"))
                // $!{provider.Title} 
                return t.next.next.image;
            else
                // $!provider.Title
                return t.next.image;
        }
        else if (t.image.equals("${"))
        {
            // ${provider.Title}
            nullString = t.next.image;   
            return t.next.image;
        }            
        else
        {
            // $provider.Title
            nullString = t.image;
            return t.image.substring(1);
        }            
    }

    public Object getVariableValue(Context context, String variable)
    {
        if (context.containsKey(variable))
        {
            return context.get(variable);
        }            
        else
        {
            return null;
        }            
    }
}
