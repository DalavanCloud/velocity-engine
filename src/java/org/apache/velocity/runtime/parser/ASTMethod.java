/* Generated By:JJTree: Do not edit this line. ASTMethod.java */

package org.apache.velocity.runtime.parser;

import java.lang.reflect.Method;

import org.apache.velocity.Context;
import org.apache.velocity.util.ClassUtils;
import org.apache.velocity.util.Introspector;

public class ASTMethod extends SimpleNode
{
    private String methodName;
    private int paramCount;
    private Method method;
    private Object[] params;

    public ASTMethod(int id)
    {
        super(id);
    }

    public ASTMethod(Parser p, int id)
    {
        super(p, id);
    }

    /** Accept the visitor. **/
    public Object jjtAccept(ParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public Object init(Context context, Object data)
        throws Exception
    {
        methodName = getFirstToken().image;
        
        paramCount = jjtGetNumChildren() - 1;
        params = new Object[paramCount];
        
        method = Introspector.getMethod((Class) data, methodName, paramCount);
        
        // Now the parameters have to be processed, there
        // may be references contained within that need
        // to be introspected.
        
        for (int i = 0; i < paramCount; i++)
            jjtGetChild(i + 1).init(context, null);
        
        return method.getReturnType();
    }
    
    public Object execute(Object o, Context context)
    {
        // I need to pass in the arguments to the
        // method. 

        for (int j = 0; j < paramCount; j++)
            params[j] = jjtGetChild(j + 1).value(context);
        
        try
        {
            return method.invoke(o, params);
        }
        catch (Exception e)
        {
            return null;
        }            
    }

    public Object invoke(Object result, Context context)
    {
        // node 1: method name
        // The rest of the nodes are parameters
        // to the method. They may be references
        // or string literals. If they are
        // references then we just use a little
        // recursion.

        String method = jjtGetChild(0).getFirstToken().image;
        int parameters = jjtGetNumChildren() - 1;

        Object[] params = new Object[parameters];

        for (int j = 0; j < parameters; j++)
        {
            Node p = jjtGetChild(j + 1);
            params[j] = p.value(context);
        }
        
        return ClassUtils.invoke(result, method, params); 
    }
}
