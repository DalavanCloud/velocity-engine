/* Generated By:JJTree: Do not edit this line. ASTIfStatement.java */

package org.apache.velocity.runtime.parser.node;

import java.io.Writer;
import java.io.IOException;

import org.apache.velocity.Context;
import org.apache.velocity.runtime.parser.*;

public class ASTIfStatement extends SimpleNode
{

    public ASTIfStatement(int id)
    {
        super(id);
    }

    public ASTIfStatement(Parser p, int id)
    {
        super(p, id);
    }

    /** Accept the visitor. **/
    public Object jjtAccept(ParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public boolean render(Context context, Writer writer)
        throws IOException
    {
        Object data = null;
        Node expression;
        
        // Only process the child nodes if the expression
        // evaluates to true. But we also need to look for
        // the presence of an else block and process that
        // if the expression doesn't evaluate to true.
        //if (evaluateExpression(expression))
        expression = jjtGetChild(0);
        if (expression.evaluate(context))
        {
            jjtGetChild(1).render(context, writer);
        }
        else
        {
            /* The condition for the if statement above evaluated
             * to false so now we walk through the child nodes
             * looking for elseif/else children.
             */
            
            int children = jjtGetNumChildren();
            
            for (int i = 2; i < children; i++)
            {
                Node child = jjtGetChild(i);
                if (child.getType() == ParserTreeConstants.JJTELSEIFSTATEMENT)
                {
                    expression = child.jjtGetChild(0);
                    if (expression.evaluate(context))
                    {
                        child.jjtGetChild(1).render(context, writer);
                        break;
                    }
                }
                else
                    child.jjtGetChild(0).render(context, writer);
            }
        }            
    
        return true;
    }

    public void process(Context context, ParserVisitor visitor)
    {
    }
}
