/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package org.apache.velocity.runtime.parser;
import java.io.*;
import java.util.*;
import org.apache.velocity.exception.VelocityException;
import org.apache.velocity.runtime.RuntimeServices;
import org.apache.velocity.runtime.parser.node.*;
import org.apache.velocity.runtime.directive.Directive;
import org.apache.velocity.runtime.directive.Macro;
import org.apache.velocity.runtime.directive.MacroParseException;
import org.apache.velocity.util.StringUtils;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.velocity.runtime.RuntimeConstants;

public class ParserTokenManager implements ParserConstants
{
    private int fileDepth = 0;

    private int lparen = 0;
    private int rparen = 0;

    List stateStack = new ArrayList(50);

    public boolean debugPrint = false;

    private boolean inReference;
    public boolean inDirective;
    private boolean inComment;
    public  boolean inSet;

    /**
     *  pushes the current state onto the 'state stack',
     *  and maintains the parens counts
     *  public because we need it in PD & VM handling
     *
     *  @return boolean : success.  It can fail if the state machine
     *     gets messed up (do don't mess it up :)
     */
    public boolean stateStackPop()
    {
        ParserState s;
        try
        {
            s = (ParserState) stateStack.remove(stateStack.size() - 1); // stack.pop
        }
        catch(IndexOutOfBoundsException e)
        {
            // empty stack
            lparen=0;
            SwitchTo(DEFAULT);
            return false;
        }

        if( debugPrint )
            System.out.println(
                " stack pop (" + stateStack.size() + ") : lparen=" +
                    s.lparen +
                        " newstate=" + s.lexstate );

        lparen = s.lparen;
        rparen = s.rparen;

        SwitchTo(s.lexstate);

        return true;
    }

    /**
     *  pops a state off the stack, and restores paren counts
     *
     *  @return boolean : success of operation
     */
    public boolean stateStackPush()
    {
        if( debugPrint )
            System.out.println(" (" + stateStack.size() + ") pushing cur state : " +
                curLexState );

        ParserState s = new ParserState();
        s.lparen = lparen;
        s.rparen = rparen;
        s.lexstate = curLexState;

        lparen = 0;
        stateStack.add(s); // stack.push

        return true;
    }

    /**
     *  Clears all state variables, resets to
     *  start values, clears stateStack.  Call
     *  before parsing.
     */
    public void clearStateVars()
    {
        stateStack.clear();

        lparen = 0;
        rparen = 0;
        inReference = false;
        inDirective = false;
        inComment = false;
        inSet = false;

        return;
    }

    /**
     * Holds the state of the parsing process.
     */
    private static class ParserState
    {
        int lparen;
        int rparen;
        int lexstate;
    }

    /**
     *  handles the dropdown logic when encountering a RPAREN
     */
    private void RPARENHandler()
    {
        /*
         *  Ultimately, we want to drop down to the state below
         *  the one that has an open (if we hit bottom (DEFAULT),
         *  that's fine. It's just text schmoo.
         */

        boolean closed = false;

        if (inComment)
            closed = true;

        while( !closed )
        {
            /*
             * look at current state.  If we haven't seen a lparen
             * in this state then we drop a state, because this
             * lparen clearly closes our state
             */

            if( lparen > 0)
            {
                /*
                 *  if rparen + 1 == lparen, then this state is closed.
                 * Otherwise, increment and keep parsing
                 */

                 if( lparen == rparen + 1)
                 {
                       stateStackPop();
                 }
                else
                {
                    rparen++;
                }

                 closed = true;
            }
            else
            {
                /*
                 * now, drop a state
                 */

                if(!stateStackPop())
                    break;
            }
        }
    }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L)
            return 58;
         if ((active0 & 0x4000000000L) != 0L)
            return 101;
         if ((active0 & 0x100L) != 0L)
            return 65;
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 64;
            return 63;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 50;
         if ((active0 & 0xe80000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
            return 63;
         }
         if ((active0 & 0x200000L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
            return 63;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000000L) != 0L)
            return 63;
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
            return 63;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_3(0xa80000L);
      case 37:
         return jjStopAtPos(0, 42);
      case 40:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 40);
      case 43:
         return jjStopAtPos(0, 39);
      case 44:
         return jjStopAtPos(0, 5);
      case 45:
         return jjStartNfaWithStates_3(0, 38, 101);
      case 46:
         return jjMoveStringLiteralDfa1_3(0x40L);
      case 47:
         return jjStopAtPos(0, 41);
      case 58:
         return jjStopAtPos(0, 7);
      case 61:
         return jjStartNfaWithStates_3(0, 52, 50);
      case 91:
         return jjStopAtPos(0, 3);
      case 93:
         return jjStopAtPos(0, 4);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x800000000L);
      case 123:
         return jjStartNfaWithStates_3(0, 8, 65);
      case 125:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_3(1, 21, 5);
         break;
      case 46:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_3(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private final int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
private final int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(3, 35, 63);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_3(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
private final int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 36, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 5);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(6, 9);
                  else if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(73, 74);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(58);
                  else if (curChar == 33)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 41)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddStates(16, 18);
                  }
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 62)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 97);
                  else if (curChar == 46)
                     jjCheckNAdd(58);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(87, 89);
                  }
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 3:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 7:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 12:
                  if (curChar == 34 && kind > 34)
                     kind = 34;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 24:
                  if (curChar == 32)
                     jjAddStates(23, 24);
                  break;
               case 25:
                  if (curChar == 10)
                     jjCheckNAddStates(13, 15);
                  break;
               case 26:
                  if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  break;
               case 27:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 29:
                  if (curChar == 32)
                     jjAddStates(25, 26);
                  break;
               case 30:
                  if (curChar == 10)
                     jjCheckNAddStates(10, 12);
                  break;
               case 31:
                  if (curChar == 39 && kind > 34)
                     kind = 34;
                  break;
               case 32:
                  if ((0x2400L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 33:
                  if (curChar == 10 && kind > 37)
                     kind = 37;
                  break;
               case 34:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 36:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 44:
                  if (curChar == 60 && kind > 45)
                     kind = 45;
                  break;
               case 45:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 46:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 62 && kind > 47)
                     kind = 47;
                  break;
               case 48:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 49:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 61 && kind > 49)
                     kind = 49;
                  break;
               case 51:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 55:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 33 && kind > 51)
                     kind = 51;
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(61);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 70:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 72:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 75:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(73, 74);
                  break;
               case 86:
                  if (curChar == 45)
                     jjCheckNAddStates(6, 9);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(87, 89);
                  break;
               case 88:
                  if (curChar == 46 && kind > 59)
                     kind = 59;
                  break;
               case 89:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 91:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(92, 93);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(92, 93);
                  break;
               case 94:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(95);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 97);
                  break;
               case 98:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(99);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(63);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(29, 32);
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 40;
                  if (curChar == 110)
                     jjAddStates(33, 34);
                  else if (curChar == 103)
                     jjAddStates(35, 36);
                  else if (curChar == 108)
                     jjAddStates(37, 38);
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 6:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 11:
                  jjCheckNAddStates(13, 15);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(39, 44);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 19:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 27:
                  jjAddStates(10, 12);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(25, 26);
                  break;
               case 37:
                  if (curChar == 100 && kind > 43)
                     kind = 43;
                  break;
               case 38:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 124 && kind > 44)
                     kind = 44;
                  break;
               case 41:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 114 && kind > 44)
                     kind = 44;
                  break;
               case 43:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 52:
                  if (curChar == 113 && kind > 49)
                     kind = 49;
                  break;
               case 53:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 62:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 125 && kind > 65)
                     kind = 65;
                  break;
               case 68:
                  if (curChar == 92)
                     jjCheckNAddStates(29, 32);
                  break;
               case 69:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 71:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
                  if (curChar == 92)
                     jjAddStates(47, 48);
                  break;
               case 76:
                  if (curChar == 108)
                     jjAddStates(37, 38);
                  break;
               case 77:
                  if (curChar == 116 && kind > 45)
                     kind = 45;
                  break;
               case 78:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 79:
                  if (curChar == 103)
                     jjAddStates(35, 36);
                  break;
               case 80:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 81:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 82:
                  if (curChar == 110)
                     jjAddStates(33, 34);
                  break;
               case 83:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 84:
                  if (curChar == 116 && kind > 51)
                     kind = 51;
                  break;
               case 85:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 15);
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe80000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_11(0xa80000L);
      default :
         return jjMoveNfa_11(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_11(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_11(1, 21, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_11(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_11(0, active0);
}
private final int jjMoveStringLiteralDfa2_11(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_11(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_11(1, active0);
}
private final int jjMoveNfa_11(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 92;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(53, 58);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(59, 62);
                  else if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(14);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 23:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 25:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 31:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 32:
                  if ((0x2400L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 33:
                  if (curChar == 10 && kind > 53)
                     kind = 53;
                  break;
               case 34:
               case 51:
                  if (curChar == 13)
                     jjCheckNAdd(33);
                  break;
               case 42:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(68, 70);
                  break;
               case 43:
                  if ((0x2400L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 44:
                  if (curChar == 10 && kind > 56)
                     kind = 56;
                  break;
               case 45:
               case 67:
                  if (curChar == 13)
                     jjCheckNAdd(44);
                  break;
               case 50:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 66:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 77:
                  if (curChar == 45)
                     jjCheckNAddStates(59, 62);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(78, 80);
                  break;
               case 79:
                  if (curChar == 46 && kind > 59)
                     kind = 59;
                  break;
               case 80:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(83, 84);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(83, 84);
                  break;
               case 85:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(86);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 89:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(90);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(53, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(16);
                  }
                  else if (curChar == 123)
                     jjAddStates(77, 81);
                  else if (curChar == 92)
                     jjCheckNAddStates(82, 85);
                  if (curChar == 101)
                     jjAddStates(86, 88);
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 1:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 4:
                  if (curChar == 102 && kind > 54)
                     kind = 54;
                  break;
               case 5:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 112 && kind > 57)
                     kind = 57;
                  break;
               case 7:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 15:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 125 && kind > 65)
                     kind = 65;
                  break;
               case 21:
                  if (curChar == 92)
                     jjCheckNAddStates(82, 85);
                  break;
               case 22:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(91, 92);
                  break;
               case 29:
                  if (curChar == 101)
                     jjAddStates(86, 88);
                  break;
               case 30:
                  if (curChar != 100)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(65, 67);
                  break;
               case 35:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 36:
                  if (curChar == 102 && kind > 55)
                     kind = 55;
                  break;
               case 37:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar != 101)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(68, 70);
                  break;
               case 46:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 47:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 123)
                     jjAddStates(77, 81);
                  break;
               case 49:
                  if (curChar != 125)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(71, 73);
                  break;
               case 52:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 125 && kind > 54)
                     kind = 54;
                  break;
               case 56:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 125 && kind > 55)
                     kind = 55;
                  break;
               case 59:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar != 125)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(74, 76);
                  break;
               case 68:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 69:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 125 && kind > 57)
                     kind = 57;
                  break;
               case 73:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 84:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 88:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(95, 96);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 92 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x680000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_8(0x280000L);
      case 42:
         return jjMoveStringLiteralDfa1_8(0x20000000L);
      default :
         return jjMoveNfa_8(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_8(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_8(1, 21, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_8(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_8(0, active0);
}
private final int jjMoveStringLiteralDfa2_8(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_8(1, active0);
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 8:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(97, 100);
                  break;
               case 1:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 5:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(101, 102);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x680000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_6(0x280000L);
      default :
         return jjMoveNfa_6(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_6(1, 21, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_6(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_6(0, active0);
}
private final int jjMoveStringLiteralDfa2_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, active0);
}
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 8:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(97, 100);
                  break;
               case 1:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 5:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(101, 102);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3000000L) != 0L)
            return 7;
         if ((active0 & 0xe80000L) != 0L)
            return 73;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 71;
         if ((active0 & 0x1000000L) != 0L)
            return 74;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_5(0xa80000L);
      case 92:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_5(0x1000000L);
      default :
         return jjMoveNfa_5(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_5(1, 21, 71);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_5(active0, 0x80000L);
      case 92:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_5(1, 24, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, active0);
}
private final int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_5(1, active0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 74;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(67, 68);
                  else if (curChar == 35)
                     jjAddStates(103, 104);
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 73:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 1:
                  if ((0xffffffe7ffffffffL & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(105, 111);
                  else if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(67, 68);
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(112, 117);
                  else if (curChar == 36)
                     jjCheckNAddStates(118, 120);
                  break;
               case 74:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(67, 68);
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 0:
                  if ((0xffffffe7ffffffffL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(0);
                  break;
               case 3:
               case 4:
                  if (curChar == 33)
                     jjCheckNAdd(2);
                  break;
               case 8:
                  if (curChar == 35)
                     jjAddStates(103, 104);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 15:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(112, 117);
                  break;
               case 16:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(22, 27);
                  break;
               case 19:
                  if (curChar == 32)
                     jjAddStates(63, 64);
                  break;
               case 20:
                  if (curChar == 40 && kind > 14)
                     kind = 14;
                  break;
               case 28:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(36, 43);
                  break;
               case 31:
                  if (curChar == 32)
                     jjAddStates(121, 122);
                  break;
               case 32:
                  if (curChar == 40 && kind > 15)
                     kind = 15;
                  break;
               case 44:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(53, 61);
                  break;
               case 47:
                  if (curChar == 32)
                     jjAddStates(123, 124);
                  break;
               case 48:
                  if (curChar == 40 && kind > 16)
                     kind = 16;
                  break;
               case 64:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 66:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 69:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 70:
                  if (curChar == 35)
                     jjCheckNAddStates(105, 111);
                  break;
               case 71:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(65, 66);
                  if (curChar == 92)
                     jjCheckNAddTwoStates(63, 64);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 73:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(125, 128);
                  if (curChar == 92)
                     jjAddStates(129, 130);
                  break;
               case 74:
                  if (curChar == 92)
                     jjAddStates(129, 130);
                  if (curChar == 92)
                     jjCheckNAddTwoStates(65, 66);
                  if (curChar == 92)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 91 && kind > 75)
                     kind = 75;
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 92)
                     jjAddStates(129, 130);
                  break;
               case 9:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 125 && kind > 13)
                     kind = 13;
                  break;
               case 18:
                  if (curChar == 116)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 22:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 30:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 34:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 38:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 46:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 50:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 55:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 92)
                     jjCheckNAddStates(125, 128);
                  break;
               case 63:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if (curChar == 92)
                     jjAddStates(131, 132);
                  break;
               case 72:
                  if (kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(0);
                  break;
               case 72:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 74 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x680000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_9(0x280000L);
      case 42:
         return jjMoveStringLiteralDfa1_9(0x10000000L);
      default :
         return jjMoveNfa_9(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_9(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_9(1, 21, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_9(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_9(0, active0);
}
private final int jjMoveStringLiteralDfa2_9(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_9(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_9(1, active0);
}
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 8:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(97, 100);
                  break;
               case 1:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 5:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(101, 102);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x680000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_2(0x280000L);
      case 93:
         return jjStopAtPos(0, 2);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x800000000L);
      default :
         return jjMoveNfa_2(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(1, 21, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(133, 138);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(139, 142);
                  else if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(28);
                  else if (curChar == 39)
                     jjCheckNAddStates(143, 145);
                  else if (curChar == 34)
                     jjCheckNAddStates(146, 148);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(146, 148);
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(146, 148);
                  break;
               case 7:
                  if (curChar == 34 && kind > 34)
                     kind = 34;
                  break;
               case 9:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(146, 148);
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(149, 152);
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(146, 148);
                  break;
               case 12:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(146, 148);
                  break;
               case 19:
                  if (curChar == 32)
                     jjAddStates(63, 64);
                  break;
               case 20:
                  if (curChar == 10)
                     jjCheckNAddStates(146, 148);
                  break;
               case 21:
                  if (curChar == 39)
                     jjCheckNAddStates(143, 145);
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(143, 145);
                  break;
               case 24:
                  if (curChar == 32)
                     jjAddStates(23, 24);
                  break;
               case 25:
                  if (curChar == 10)
                     jjCheckNAddStates(143, 145);
                  break;
               case 26:
                  if (curChar == 39 && kind > 34)
                     kind = 34;
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 36:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 39:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 40:
                  if (curChar == 45)
                     jjCheckNAddStates(139, 142);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(41, 43);
                  break;
               case 42:
                  if (curChar == 46 && kind > 59)
                     kind = 59;
                  break;
               case 43:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(133, 138);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(153, 156);
                  break;
               case 1:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 6:
                  jjCheckNAddStates(146, 148);
                  break;
               case 8:
                  if (curChar == 92)
                     jjAddStates(157, 162);
                  break;
               case 9:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(146, 148);
                  break;
               case 14:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(146, 148);
                  break;
               case 22:
                  jjAddStates(143, 145);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(23, 24);
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(163, 164);
                  break;
               case 33:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if (curChar == 92)
                     jjAddStates(165, 166);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(167, 168);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(169, 170);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(146, 148);
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(143, 145);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x680000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_10(0x280000L);
      default :
         return jjMoveNfa_10(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_10(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_10(1, 21, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_10(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_10(0, active0);
}
private final int jjMoveStringLiteralDfa2_10(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_10(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_10(1, active0);
}
private final int jjMoveNfa_10(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(12, 13);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 5:
                  if (curChar == 10 && kind > 27)
                     kind = 27;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 11:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 14:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(171, 174);
                  break;
               case 1:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 8:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(175, 176);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe80000L) != 0L)
            return 67;
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 65;
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000000L) != 0L)
            return 1;
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0xa80000L);
      case 91:
         return jjStopAtPos(0, 1);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 123:
         return jjStopAtPos(0, 71);
      case 125:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 65);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 68;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(177, 182);
                  else if (curChar == 35)
                     jjCheckNAddStates(183, 189);
                  else if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 36)
                     jjCheckNAddStates(190, 192);
                  break;
               case 67:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 1:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 36)
                     jjCheckNAddStates(190, 192);
                  break;
               case 6:
               case 7:
                  if (curChar == 33)
                     jjCheckNAdd(5);
                  break;
               case 9:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(177, 182);
                  break;
               case 10:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 21);
                  break;
               case 13:
                  if (curChar == 32)
                     jjAddStates(89, 90);
                  break;
               case 14:
                  if (curChar == 40 && kind > 14)
                     kind = 14;
                  break;
               case 22:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(30, 37);
                  break;
               case 25:
                  if (curChar == 32)
                     jjAddStates(193, 194);
                  break;
               case 26:
                  if (curChar == 40 && kind > 15)
                     kind = 15;
                  break;
               case 38:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(47, 55);
                  break;
               case 41:
                  if (curChar == 32)
                     jjAddStates(195, 196);
                  break;
               case 42:
                  if (curChar == 40 && kind > 16)
                     kind = 16;
                  break;
               case 58:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 60:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 63:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 64:
                  if (curChar == 35)
                     jjCheckNAddStates(183, 189);
                  break;
               case 65:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(197, 200);
                  break;
               case 67:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 5:
                  if (curChar == 91 && kind > 75)
                     kind = 75;
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 116)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 16:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 32:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 49:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 92)
                     jjCheckNAddStates(197, 200);
                  break;
               case 57:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
                  if (curChar == 92)
                     jjAddStates(201, 202);
                  break;
               case 66:
                  if (kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 24;
         }
         if ((active0 & 0x40L) != 0L)
            return 105;
         if ((active0 & 0x680000L) != 0L)
            return 83;
         return -1;
      case 1:
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 24;
         }
         if ((active0 & 0x200000L) != 0L)
            return 81;
         return -1;
      case 2:
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
            return 24;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 24;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 24;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_4(0x280000L);
      case 41:
         return jjStopAtPos(0, 12);
      case 44:
         return jjStopAtPos(0, 5);
      case 46:
         return jjMoveStringLiteralDfa1_4(0x40L);
      case 58:
         return jjStopAtPos(0, 7);
      case 91:
         return jjStopAtPos(0, 3);
      case 93:
         return jjStopAtPos(0, 4);
      case 102:
         return jjMoveStringLiteralDfa1_4(0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_4(0x800000000L);
      case 123:
         return jjStopAtPos(0, 8);
      case 125:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_4(1, 21, 81);
         break;
      case 46:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_4(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_4(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private final int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_4(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_4(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_4(1, active0);
}
private final int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_4(3, 35, 24);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_4(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_4(2, active0);
}
private final int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_4(4, 36, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_4(3, active0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 106;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 105:
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(95, 96);
                  break;
               case 83:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(203, 208);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(95, 105);
                  else if (curChar == 45)
                     jjCheckNAddStates(209, 212);
                  else if (curChar == 35)
                     jjCheckNAddStates(213, 219);
                  else if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(77, 78);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(220, 222);
                  else if (curChar == 34)
                     jjCheckNAddStates(223, 225);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(226, 231);
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 3:
                  if (curChar == 34 && kind > 34)
                     kind = 34;
                  break;
               case 5:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(232, 235);
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 8:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 15:
                  if (curChar == 32)
                     jjAddStates(236, 237);
                  break;
               case 16:
                  if (curChar == 10)
                     jjCheckNAddStates(223, 225);
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(220, 222);
                  break;
               case 18:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(220, 222);
                  break;
               case 20:
                  if (curChar == 32)
                     jjAddStates(238, 239);
                  break;
               case 21:
                  if (curChar == 10)
                     jjCheckNAddStates(220, 222);
                  break;
               case 22:
                  if (curChar == 39 && kind > 34)
                     kind = 34;
                  break;
               case 24:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(226, 231);
                  break;
               case 26:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(32, 37);
                  break;
               case 29:
                  if (curChar == 32)
                     jjAddStates(25, 26);
                  break;
               case 30:
                  if (curChar == 40 && kind > 14)
                     kind = 14;
                  break;
               case 38:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(46, 53);
                  break;
               case 41:
                  if (curChar == 32)
                     jjAddStates(195, 196);
                  break;
               case 42:
                  if (curChar == 40 && kind > 15)
                     kind = 15;
                  break;
               case 54:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(63, 71);
                  break;
               case 57:
                  if (curChar == 32)
                     jjAddStates(240, 241);
                  break;
               case 58:
                  if (curChar == 40 && kind > 16)
                     kind = 16;
                  break;
               case 74:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 76:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 79:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(77, 78);
                  break;
               case 80:
                  if (curChar == 35)
                     jjCheckNAddStates(213, 219);
                  break;
               case 81:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 84:
                  if (curChar == 45)
                     jjCheckNAddStates(209, 212);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(85, 87);
                  break;
               case 86:
                  if (curChar == 46 && kind > 59)
                     kind = 59;
                  break;
               case 87:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(90, 91);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(90, 91);
                  break;
               case 92:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(93);
                  break;
               case 94:
                  if (curChar == 46)
                     jjCheckNAdd(95);
                  break;
               case 97:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(98);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(98);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(99, 100);
                  break;
               case 101:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(102);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(102);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(203, 208);
                  break;
               case 104:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(95, 105);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 105:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 83:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 62;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 31;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(24);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(242, 245);
                  break;
               case 2:
                  jjCheckNAddStates(223, 225);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(246, 251);
                  break;
               case 5:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 10:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(223, 225);
                  break;
               case 18:
                  jjAddStates(220, 222);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(238, 239);
                  break;
               case 23:
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(24);
                  break;
               case 28:
                  if (curChar == 116)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 48:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 56:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 60:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 65:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 92)
                     jjCheckNAddStates(242, 245);
                  break;
               case 73:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
                  if (curChar == 92)
                     jjAddStates(37, 38);
                  break;
               case 82:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 91:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(252, 253);
                  break;
               case 96:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(254, 255);
                  break;
               case 100:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(256, 257);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(223, 225);
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(220, 222);
                  break;
               case 82:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 106 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x680000L) != 0L)
            return 62;
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 60;
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000000L) != 0L)
            return 1;
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_1(0x280000L);
      case 40:
         return jjStopAtPos(0, 10);
      case 91:
         return jjStopAtPos(0, 1);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x800000000L);
      case 123:
         return jjStopAtPos(0, 71);
      case 125:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(1, 21, 60);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(3, 35, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 36, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 62:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(258, 263);
                  else if (curChar == 35)
                     jjCheckNAddStates(264, 270);
                  else if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(56, 57);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(258, 263);
                  break;
               case 5:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(11, 16);
                  break;
               case 8:
                  if (curChar == 32)
                     jjAddStates(271, 272);
                  break;
               case 9:
                  if (curChar == 40 && kind > 14)
                     kind = 14;
                  break;
               case 17:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(25, 32);
                  break;
               case 20:
                  if (curChar == 32)
                     jjAddStates(238, 239);
                  break;
               case 21:
                  if (curChar == 40 && kind > 15)
                     kind = 15;
                  break;
               case 33:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(42, 50);
                  break;
               case 36:
                  if (curChar == 32)
                     jjAddStates(273, 274);
                  break;
               case 37:
                  if (curChar == 40 && kind > 16)
                     kind = 16;
                  break;
               case 53:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 55:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 58:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 59:
                  if (curChar == 35)
                     jjCheckNAddStates(264, 270);
                  break;
               case 60:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 62:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 31;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(275, 278);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 7:
                  if (curChar == 116)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 13:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 27:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 35:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 39:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 44:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 92)
                     jjCheckNAddStates(275, 278);
                  break;
               case 52:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if (curChar == 92)
                     jjAddStates(279, 280);
                  break;
               case 61:
                  if (kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x680000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_7(0x280000L);
      case 93:
         return jjMoveStringLiteralDfa1_7(0x40000000L);
      default :
         return jjMoveNfa_7(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_7(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_7(1, 21, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_7(active0, 0x80000L);
      case 93:
         return jjMoveStringLiteralDfa2_7(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_7(0, active0);
}
private final int jjMoveStringLiteralDfa2_7(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_7(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         break;
      case 91:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_7(1, active0);
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 36 && kind > 17)
                     kind = 17;
                  break;
               case 8:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 33 && kind > 18)
                     kind = 18;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(97, 100);
                  break;
               case 1:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 5:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(101, 102);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   87, 89, 90, 91, 96, 97, 87, 90, 57, 96, 27, 28, 31, 11, 12, 13, 
   1, 2, 4, 11, 16, 12, 13, 24, 25, 29, 30, 66, 67, 69, 70, 71, 
   72, 83, 85, 80, 81, 77, 78, 14, 15, 17, 19, 24, 25, 60, 61, 73, 
   74, 94, 95, 98, 99, 78, 80, 81, 82, 87, 88, 78, 81, 10, 87, 19, 
   20, 31, 32, 34, 42, 43, 45, 50, 32, 51, 66, 43, 67, 54, 57, 64, 
   71, 76, 22, 23, 24, 25, 35, 40, 47, 13, 14, 26, 27, 85, 86, 89, 
   90, 5, 6, 7, 8, 9, 10, 9, 11, 22, 27, 36, 43, 53, 61, 73, 
   16, 28, 44, 45, 29, 17, 2, 3, 5, 31, 32, 47, 48, 63, 64, 65, 
   66, 7, 8, 67, 68, 41, 43, 44, 45, 50, 51, 41, 44, 27, 50, 22, 
   23, 26, 6, 7, 8, 6, 11, 7, 8, 33, 34, 35, 36, 9, 10, 12, 
   14, 19, 20, 30, 31, 37, 38, 48, 49, 52, 53, 8, 9, 10, 11, 12, 
   13, 10, 22, 38, 39, 23, 11, 16, 21, 30, 37, 47, 55, 67, 5, 6, 
   8, 25, 26, 41, 42, 57, 58, 59, 60, 61, 62, 85, 87, 88, 89, 99, 
   100, 85, 88, 94, 99, 32, 37, 46, 53, 63, 71, 83, 18, 19, 22, 2, 
   3, 4, 26, 38, 54, 55, 39, 27, 2, 7, 3, 4, 15, 16, 20, 21, 
   57, 58, 73, 74, 75, 76, 5, 6, 8, 10, 15, 16, 92, 93, 97, 98, 
   101, 102, 5, 17, 33, 34, 18, 6, 11, 16, 25, 32, 42, 50, 62, 8, 
   9, 36, 37, 52, 53, 54, 55, 56, 57, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "REFERENCE", 
   "REFMODIFIER", 
   "REFINDEX", 
   "DIRECTIVE", 
   "REFMOD2", 
   "DEFAULT", 
   "REFMOD", 
   "IN_TEXTBLOCK", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_SINGLE_LINE_COMMENT", 
   "PRE_DIRECTIVE", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0x1bfffffe7f81ffffL, 0x9e3L, 
};
static final long[] jjtoSkip = {
   0x80000000L, 0x600L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x600L, 
};
static final long[] jjtoMore = {
   0x1007e0000L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[106];
private final int[] jjstateSet = new int[212];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public ParserTokenManager(CharStream stream)
{
   input_stream = stream;
}
public ParserTokenManager(CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 106; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 12 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 5;
int defaultLexState = 5;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 73)
         {
            jjmatchedKind = 73;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 73)
         {
            jjmatchedKind = 73;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 73)
         {
            jjmatchedKind = 73;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 32)
         {
            jjmatchedKind = 32;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 31)
         {
            jjmatchedKind = 31;
         }
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 31)
         {
            jjmatchedKind = 31;
         }
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         if (jjmatchedPos == 0 && jjmatchedKind > 31)
         {
            jjmatchedKind = 31;
         }
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 73 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * push every terminator character back into the stream
         */

        input_stream.backup(1);

        inReference = false;

        if ( debugPrint )
            System.out.print("REF_TERM :");

        stateStackPop();
         break;
      case 74 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if ( debugPrint )
            System.out.print("DIRECTIVE_TERM :");

        input_stream.backup(1);
        inDirective = false;
        stateStackPop();
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 17 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (! inComment)
        {
            /*
             * if we find ourselves in REFERENCE, we need to pop down
             * to end the previous ref
             */

            if (curLexState == REFERENCE)
            {
                inReference = false;
                stateStackPop();
            }

            inReference = true;

            if ( debugPrint )
                System.out.print( "$  : going to " + REFERENCE );

            stateStackPush();
            SwitchTo(REFERENCE);
        }
         break;
      case 18 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (! inComment)
        {
            /*
             * if we find ourselves in REFERENCE, we need to pop down
             * to end the previous ref
             */

            if (curLexState == REFERENCE)
            {
                inReference = false;
                stateStackPop();
            }

            inReference = true;

            if ( debugPrint )
                System.out.print( "$!  : going to " + REFERENCE );

            stateStackPush();
            SwitchTo(REFERENCE);
        }
         break;
      case 19 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
       if (!inComment)
       {
           inComment = true;
           stateStackPush();
           SwitchTo( IN_TEXTBLOCK );
       }
         break;
      case 20 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inComment)
        {
                input_stream.backup(1);
                inComment = true;
                stateStackPush();
                SwitchTo( IN_FORMAL_COMMENT);
        }
         break;
      case 21 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inComment)
        {
                inComment=true;
                stateStackPush();
                SwitchTo( IN_MULTI_LINE_COMMENT );
        }
         break;
      case 22 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (! inComment)
        {
            /*
             * We can have the situation where #if($foo)$foo#end.
             * We need to transition out of REFERENCE before going to DIRECTIVE.
             * I don't really like this, but I can't think of a legal way
             * you are going into DIRECTIVE while in REFERENCE.  -gmj
             */

            if (curLexState == REFERENCE || curLexState == REFMODIFIER )
            {
                inReference = false;
                stateStackPop();
            }

            inDirective = true;

            if ( debugPrint )
                System.out.print("# :  going to " + DIRECTIVE );

            stateStackPush();
            SwitchTo(PRE_DIRECTIVE);
        }
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     stateStackPush();
     SwitchTo(REFINDEX);
         break;
      case 2 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     stateStackPop();
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!inComment)
            lparen++;

        /*
         * If in REFERENCE and we have seen the dot, then move
         * to REFMOD2 -> Modifier()
         */

        if (curLexState == REFMODIFIER )
            SwitchTo( REFMOD2 );
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       RPARENHandler();
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * need to simply switch back to REFERENCE, not drop down the stack
         * because we can (infinitely) chain, ala
         * $foo.bar().blargh().woogie().doogie()
         */

        SwitchTo( REFERENCE );
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (! inComment)
        {
            inDirective = true;

            if ( debugPrint )
                System.out.print("#set :  going to " + DIRECTIVE );

            stateStackPush();
            inSet = true;
            SwitchTo(DIRECTIVE);
        }

        /*
         *  need the LPAREN action
         */

        if (!inComment)
        {
            lparen++;

            /*
             * If in REFERENCE and we have seen the dot, then move
             * to REFMOD2 -> Modifier()
             */

            if (curLexState == REFMODIFIER )
                SwitchTo( REFMOD2 );
        }
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (! inComment)
        {
            inDirective = true;

            if ( debugPrint )
                System.out.print("#local :  going to " + DIRECTIVE );

            stateStackPush();
            inSet = true;
            SwitchTo(DIRECTIVE);
        }

        /*
         *  need the LPAREN action
         */

        if (!inComment)
        {
            lparen++;

            /*
             * If in REFERENCE and we have seen the dot, then move
             * to REFMOD2 -> Modifier()
             */

            if (curLexState == REFMODIFIER )
                SwitchTo( REFMOD2 );
        }
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (! inComment)
        {
            inDirective = true;

            if ( debugPrint )
                System.out.print("#global :  going to " + DIRECTIVE );

            stateStackPush();
            inSet = true;
            SwitchTo(DIRECTIVE);
        }

        /*
         *  need the LPAREN action
         */

        if (!inComment)
        {
            lparen++;

            /*
             * If in REFERENCE and we have seen the dot, then move
             * to REFMOD2 -> Modifier()
             */

            if (curLexState == REFMODIFIER )
                SwitchTo( REFMOD2 );
        }
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!inComment)
        {
            if (curLexState == REFERENCE)
            {
                inReference = false;
                stateStackPop();
            }

            inComment = true;
            stateStackPush();
            SwitchTo(IN_SINGLE_LINE_COMMENT);
        }
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     inComment = false;
     stateStackPop();
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inComment = false;
    stateStackPop();
         break;
      case 29 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inComment = false;
    stateStackPop();
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inComment = false;
    stateStackPop();
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         *  - if we are in DIRECTIVE and haven't seen ( yet, then also drop out.
         *      don't forget to account for the beloved yet wierd #set
         *  - finally, if we are in REFMOD2 (remember : $foo.bar( ) then " is ok!
         */

         if( curLexState == DIRECTIVE && !inSet && lparen == 0)
            stateStackPop();
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if ( debugPrint )
            System.out.println(" NEWLINE :");

        stateStackPop();

        if (inSet)
            inSet = false;

        if (inDirective)
            inDirective = false;
         break;
      case 53 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        inDirective = false;
        stateStackPop();
         break;
      case 54 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        SwitchTo(DIRECTIVE);
         break;
      case 55 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        SwitchTo(DIRECTIVE);
         break;
      case 56 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        inDirective = false;
        stateStackPop();
         break;
      case 57 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        inDirective = false;
        stateStackPop();
         break;
      case 59 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * Remove the double period if it is there
         */
        if (matchedToken.image.endsWith("..")) {
            input_stream.backup(2);
            matchedToken.image = matchedToken.image.substring(0,matchedToken.image.length()-2);
        }

        /*
         * check to see if we are in set
         *    ex.  #set $foo = $foo + 3
         *  because we want to handle the \n after
         */

        if ( lparen == 0 && !inSet && curLexState != REFMOD2 && curLexState != REFINDEX)
        {
            stateStackPop();
        }
         break;
      case 60 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * check to see if we are in set
         *    ex.  #set $foo = $foo + 3
         *  because we want to handle the \n after
         */

        if ( lparen == 0 && !inSet && curLexState != REFMOD2)
        {
            stateStackPop();
    }
         break;
      case 70 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * push the alpha char back into the stream so the following identifier
         * is complete
         */

        input_stream.backup(1);

        /*
         * and munge the <DOT> so we just get a . when we have normal text that
         * looks like a ref.ident
         */

        matchedToken.image = ".";

        if ( debugPrint )
            System.out.print("DOT : switching to " + REFMODIFIER);
        SwitchTo(REFMODIFIER);
         break;
      case 72 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        stateStackPop();
         break;
      default : 
         break;
   }
}
}
