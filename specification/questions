A collection of questions to be answered before
a final specification can be drafted:

-------------------------------------------------------

1. Should the last element of an iterator be
   available after the block is complete:
   
   #foreach $element in $list
   {
       $element
   }
   
   Is $element available here or not.
   
   Right now in velocity if $element is defined
   before the #foreach it is saved and restored
   after the #foreach. The value of $element is
   not available after the #foreach block.

   <Jon S. Stevens>
   $element should not be available after the foreach
   There should be a $velocity_count variable available
   within the scope of the foreach. This variable should
   start value should be a preference in the velocity.properties
   file.

-------------------------------------------------------

2. How should expressions in #if/#elseif be
   evaluated?
   
   #if ($variable)
   {
       do something.
   }
   
   Strictly to boolean values. Right now in
   velocity if $variable is defined an a
   Boolean object then true/false applies.
   If $variable is defined and is not a Boolean
   object then the expression is true.

   <Jon S. Stevens>
   I agree with the above. However, if $variable evaluates to 
   null, then the result should be false. If $variable is not a 
   Boolean and it is not null, then it should evaluate to true.

-------------------------------------------------------

3. How are null values to be handled?

   For example if a reference appears
   in a template:
   
   $foo
   
   $bar.Name
   
   And it has a null value. Does it appear
   as a literal? Not at all? Or some sort
   of message.
   
   Or should it be configurable?

   Current Implementation:
   
   Right now, if it is null the image of the token is spit out:
   ie: $foo. But, if the token is $!foo then nothing is output.

   Responses:
   
   <Daniel L. Rall>
   If configurable, I propose a NullHandler interface with a default
   implementation that logs the null (minimally!) and puts nothing in the
   output.

   <Jon S. Stevens>
   I agree with Daniel, except that I would add to the default implementation to 
   make it to spit it out as a literal.
