<?xml version="1.0"?>

<document>

 <header>
  <title>Velocity Design</title>
  <subtitle>Velocity Design</subtitle>
  <authors>
   <person name="Velocity Documentation Team" email="jvanzyl@locus.apache.org"/>
  </authors>
 </header>

 <body>

 <s1 title="Design">

 <p>
    Velocity is a Java-based template engine. It can be used as a
    standalone utility for generating source code, HTML, reports,
    or it can be combined with other systems to provide template
    services. Velocity will be tightly integrated with the 
    <link href="http://java.apache.org/turbine">Turbine</link>
    web application framework to provide a template service that will 
    enable a true MVC model by which web applications may be developed.
 </p>
 
 <p>
    Velocity has a myriad of potential uses--generating SQL from XML schemas, 
    creating postscript output from XML files, generating Java source
    code for Java files--but it is expected to be most widely used 
    by web developers looking for a better alternative to 
    <link href="http://www.php.org/">PHP</link> and 
    <link href="http://java.sun.org/products/jsp/">Java 
    Server Pages</link> (JSPs). 
 </p>    

 <p>    
    Velocity allows web page designers to embed simple 
    and useful script elements in their web pages. These script elements work 
    in conjunction with a Context object, which is defined in Java code. 
    A context object--essentially a Hashtable that provides get and set 
    methods for retrieving and setting objects by name within the Context
    --provides a &quot;hook&quot; from the Java code to the Velocity script
    elements. These script elements allow a web designer to retrieve 
    objects from the Context and insert these into a web page as text 
    values. The web designer has some control over looping (for each) 
    and conditional statements (if/else). 
 </p>
 
 <p>
    Velocity enforces a Model-View-Controller (MVC) style of development 
    by separating Java code from HTML template code. Unlike JSPs, 
    Velocity does not allow Java code to be embedded in pages. Unlike PHP, 
    Velocity does not implement features with other functions. The MVC 
    approach is one of Velocity's great strengths, and allows for more 
    maintainable and better designed web pages.
 </p>
 
 <p>
    Although MVC-style development can sometimes lead to longer incubation 
    periods for web sites, particularly if the developers involved are new 
    to MVC, this approach saves time over the long term (believe us, we have 
    been doing this for a long time now). The MVC abstraction prevents web page 
    designers from messing with a software engineer's Java code, and 
    programmers from unduly influencing the look of web sites. Velocity enforces 
    a contract that defines what roles people play in the web site development 
    process.   
 </p>

 <p>    
    The concept for Velocity was borrowed from 
    <link href="http://www.webmacro.org/">WebMacro</link>, 
    and those involved in the Velocity project acknowledge and appreciate 
    the development and design work that went into the WebMacro project.
 </p>
 
</s1>

</body>
</document>
