<?xml version="1.0"?>

<document>

 <header>
  <title>Velocity Todo</title>
  <subtitle>Velocity Todo</subtitle>
  <authors>
   <person name="Velocity Documentation Team" email="jvanzyl@locus.apache.org"/>
  </authors>
 </header>

<body>

<s1 title="Todo">

<p>
This is an informal document describing what needs to
be done in the Velocity code base and the 
Velocity documentation. If you need more detailed help, or have specific 
questions, please send mail to the mailing list 
(<link href="mailto:velocity-dev@jakarta.apache.org">velocity-dev@jakarta.apache.org</link>). 
The Todo list that follows is roughly in order of importance.
</p>

</s1>

<s1 title="The List">

    <p>
    <strong>Runtime API</strong>
    <br/>
        The Velocity Runtime is the single access point for all
        Velocity's functionality. A standard API for the
        Runtime should be defined so that in the span between
        the 0.5 Milestone release and a 1.0 release, the Runtime
        API changes as little as possible.
    </p>

    <p>
    <strong>Directive Interface</strong>
    <br/>
        Right now there is a very thin interface for directives, but
        some knowledge of JavaCC is required. The directive
        interface is not intended to be used outside core Velocity
        developers (it is not intended to be a public API), but it
        probably makes sense to shield directive creators from JavaCC.
    </p>

    <p>
    <strong>Context</strong>
    <br/>
        The Velocity Context class is still fairly primitive. It
        loosely adheres to a Map, but it definitely needs some
        thinking. It works fine now, but it might be good to
        think about: how to load standard tools and how to
        make that process efficient; how to stamp items in
        the context with expiry durations so that items can
        be cached and how this might work.
    </p>

    <p>
    <strong>User's Guide</strong>
    <br/>
        This would be a guide for designers who would
        be using the Velocity Template Language (VTL) to
        create templates. The users guide would give
        example usage and a definitive description
        of the VTL syntax. <link href="mailto:jvanzyl@periapt.com">Jason van Zyl</link>
        has started work on this with John Castura, but any and all
        suggestions are welcome.
    </p>
    
    <p>
    <strong>Developer Guide</strong>
    <br/>
        This would be a guide for developers who would use
        Velocity as a standalone servlet tool, or in conjuction
        with a servlet controller framework like Turbine.
        <link href="mailto:jvanzyl@periapt.com">Jason van Zyl</link> is
        currently working on this guide, but any and all suggestions
        are welcome.
    </p>
    
    <p>
    <strong>Template Loader System</strong>
    <br/>
        The template loader system is functional but could probably use an
        overhaul. There is currently a double template instantiation
        problem. It is not causing any serious problems, but it
        should be corrected. We could utilize some
        object caching/pooling code from Turbine, or JServ, or the
        Avalon Server Framework.
    </p>

    <p>
    <strong>Caching</strong>
    <br/>
        It would be good to have a discussion about how objects
        in the context should be cached, how the caching
        should be specified, and who should control the
        caching: the designer, by specifying something in the template; 
        the developer,
        by placing expiry times on objects placed in the context;
        or a third party, such as a content manager. For example,
        say an array consisting of a top 10 list of books is
        placed in the context. This top 10 list might be valid
        for a 24 hour period: how should that be specified? Say
        a content manager later decides this list will be valid
        for a week. Do they tell the designer, who in turn changes
        the template, or could we provide a mechanism that would
        allow a content manager to change the default expiry time
        for that particular context object with the aid of a webapp 
        of some sort? The groundwork has be laid for a flexible
        caching system in Velocity, but this discussion would be
        one of usage and policy.
    </p>

    <p>
    <strong>Parser Pool</strong>
    <br/>
        It would be good to create a pool of parsers that could
        be utilized by the Runtime. Right now there is only a single
        parser and the parsing is synchronized. The parsing doesn't
        happen all that often in production, but a small pool of
        parsers might alleviate any potential bottlenecks. Again,
        object caching/pooling code could be borrowed from Turbine,
        JServ, or the Avalon Server Framework.
    </p>

    <p>
    <strong>UML Overview</strong>
    <br/>
        It would great to include a set of comprehensive
        UML diagrams that describe Velocity. This would 
        allow new developers to get up to speed quickly.
    </p>

    <p>
    <strong>Velocity Profiling</strong>
    <br/>
        If someone is handy with one of the standard profilers,
        it would be great to start hunting for bottlenecks. No
        serious optimization has been started. But in conjuction
        with the presence of a JUnit test suite, optimization
        changes could be made with confidence. It would be nice
        to have a configuration of a setup for a common profiler
        so that anyone who wanted to do some profiling could do
        so in a consistent manner.
    </p>

    <p>
    <strong>Encoding Caching</strong>
    <br/>
        What would this entail? And how could we implement an
        efficient encoding caching mechanism.
    </p>
    
    <p>
    <strong>Plugins</strong>
    <br/>
        It would be good to allow plugins in the form of JAR files
        to be picked up the Velocity Runtime during startup. This
        would be a good way for Velocity developers to share tools
        that could be used in a context. For example there are some
        utilities in Turbine that allow email to be sent from within
        a template. It might be good to package this sort of utility
        in a JAR file so that there are no dependencies in the
        Velocity build for a specific utility.
    </p>
    
    <p>
    <strong>Context Tools</strong>
    <br/>
        What kind of tools might be good to add to Velocity? There
        are several utilties that have been created in Turbine that
        might be good to move over to the Velocity code base.
    </p>
    
    <p>
    <strong>Syntax Dumper</strong>
    <br/>
        Right now there is a primitive syntax dumper in the Velocity
        code base, and it could be improved. This tool is very helpful
        in debugging, and it is also good for creating directives.
        It basically has a simple dump method that is used for all
        the AST node types. It would be good to tailor dump methods
        for particular AST node types so that the structure produced
        is a little clearer.
    </p>
    
    <p>
    <strong>Syntax Checker</strong>
    <br/>
        It would be good to have a standard syntax checker, something
        that would find all syntax errors and report them to the
        designer in some intelligible format. This tool could be
        hooked into various designer tools like DreamWeaver.
    </p>
    
    <p>
    <strong>Compiler</strong>
    <br/>
        It would be great to have a template compiler. There is a great
        utility called JavaClass that provides a very clean and simple way
        to create class files, and there is also some byte code generating
        code present in the DynamicJava package that could be utilized.
    </p>

    <p>
    <strong>IDE Integration</strong>
    <br/>
        How could Velocity be integrated into standard IDEs like
        JBuilder and VisualAge?
    </p>

    <p>
    <strong>Scripting Language Integration</strong>
    <br/>
        This is something that has been discussed on the Turbine
        list. Allowing Context building classes to be written
        in JPython, Rhino or other scripting languages would 
        dramatically improve development time and might allow technically 
        proficient web designers who are familiar JavaScript to create 
        an entire servlet solution with Velocity. As most of these
        scripting solutions provide a compiler, performance would still
        remain at an acceptable level.
    </p>

    

</s1>

</body>
</document>
