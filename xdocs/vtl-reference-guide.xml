<?xml version="1.0"?>

<document>

 <header>
  <title>VTL Reference Guide</title>
  <subtitle>VTL Refernce Guide</subtitle>
  <authors>
   <person name="Jason van Zyl" email="jvanzyl@apache.org"/>
  </authors>
 </header>

<body>

<!--

Some of the user's guide info should be moved into
this reference guide and links should be made from
the user's guide to this document

-->

<s1 title="About this Guide">

<p>
    This guide is meant to be the definitive reference for
    the Velocity Template Language (VTL).
</p> 

</s1>

<s1 title="References">

<p>
    There are three types of references in the VTL: variables, properties
    and methods. As a designer using the VTL, you must come to an agreement
    with your engineers as to what the specific names of references are so
    you can use them correctly in your templates.
</p>

<p>
    <strong>Variables</strong>
    <br/>
    Variables are references that consist of a leading "$" character
    followed by a VTL <em>Identifier</em>. A VTL <em>Identifier</em> must start with
    an alphabetic character (a .. z or A .. Z), the rest of the
    characters must be of the following types: an alphabetic character,
    a numeric character (0 .. 9), a hyphen character ("-"), 
    or an underscore character ("_"). These are examples of valid
    variable references in the VTL:
</p>

<p>
    <source><![CDATA[
    $mudSlinger
    $mud-slinger
    $mud_slinger
    $mudSlinger1
    ]]></source>
</p>

<p>
    <strong>Properties</strong>
    <br/>
    Properties are references that consist of a leading "$"
    character followed a VTL <em>Identifier</em>, followed by
    of dot character (".") then another VTL <em>Identifier</em>. 
    These are examples of valid property references in the VTL:
</p>

<p>
    <source><![CDATA[
    $customer.Address
    $purchase.Total
    ]]></source>
</p>

<p>
    <strong>Methods</strong>
    <br/>
    Methods are references that consist of a leading "$"
    character followed a VTL <em>Identifier</em>, followed
    by a VTL <em>Method Body</em>. A VTL <em>Method Body</em>
    consists of a VTL <em>Identifier</em> followed by an
    left parenthesis character ("("), followed by an optional parameter
    list, followed by right parenthesis character (")").
    These are examples of valid method references in the
    VTL:
</p>

<p>
    <source><![CDATA[
    $customer.getAddress()
    $purchase.getTotal()
    $page.setTitle("My Home Page")
    $person.setAttributes("Strange", "Weird", "Excited")
    ]]></source>
</p>

<p>
    Now you may have noticed that the first two examples
    $customer.getAddress() and $purchase.getTotal() look very
    similiar to the first two example Properties $customer.Address
    and $purchase.Total. If you guessed that these examples must
    be related some in some fashion you are correct! VTL Properties
    are simply a shorthand for notation for VTL Methods. Using the
    Property $customer.Address would have the exact same effect as
    using the Method $customer.getAddress(). It is generally preferable
    to use a Property when available. The main difference between Properties
    and Methods is that you can specify a parameter list to a Method.
</p>

<p>
    <strong>Formal Reference Notation</strong>
    <br/>
    In the examples listed above the shorthand notation for
    references was used, but there is a formal notation that
    looks like the following:
</p>

<p>
    <source><![CDATA[
    ${mudSlinger}
    ${customer.Address}
    ${purchase.getTotal()}
    ]]></source>
</p>

<p>
    In almost all cases you will use the shorthand notation
    for references. But there are some cases where the formal
    notation is required for correct processing. Say you were
    constructing a sentence on the fly where $vice was to be
    used as the base word in the noun of a sentence. Say you
    wanted to allow someone to choose the base word and produce
    one of the two following results: "Jack is a pyromaniac." or
    "Jack is a kleptomaniac.". You might have the following in
    a VTL template:
</p>

<p>
    <source><![CDATA[
    Jack is a $vicemaniac.
    ]]></source>
</p>

<p>
    But as you might have guessed this will confuse Velocity
    because Velocity can't tell that $vice is the Identifer
    that you mean to use. It will assume that $vicemaniac
    is the Identifier and try to use that to find an appropriate
    value. You can get around this problem by using the formal
    notation for a reference:
</p>

<p>
    <source><![CDATA[
    Jack is a ${vice}maniac.
    ]]></source>
</p>

<p>
    Now Velocity knows that you want to use $vice as your
    Identifier and not $vicemaniac. The formal notation usually
    comes in handy when you have references directly ajacent
    to text in your templates.
</p>

<p>
    <strong>Quiet Reference Notation</strong>
    <br/>
    Velocity's normal behavior upon encountering a
    reference that is undefined is to output the image
    of the reference. For example, say you have have
    the following VTL as part of an HTML for you
    want to produce:
</p>

<p>
    <source><![CDATA[
    <input type="text" name="email" value="$email"/>
    ]]></source>
</p>

<p>
    Now when the form initially loads the variable
    reference $email has no value, but you don't
    want the text field to have a value of "$email"
    it should be blank. To circumvent Velocity's
    normal behavior you use the quiet reference
    notation: so instead of using $email in the
    VTL you would use $!email. So the above example
    would look like the following:
</p>    

<p>
    <source><![CDATA[
    <input type="text" name="email" value="$!email"/>
    ]]></source>
</p>

<p>
    Now when the form is initially loaded, while
    $email has no value yet, an empty string will
    be output instead of "$email".
</p>

</s1>

<s1 title="Directives">
<p>        
    <strong>#set</strong>
    <br/>
    The #set directive is used for setting the value of
    a reference. The reference being assigned a value can
    either be a variable reference or a property reference:
</p>

<p>
    <source><![CDATA[
    #set $primate = "five assed monkey"
    #set $customer.Behavior = $primate 
    ]]></source>
</p>

<p>
    The left hand side (LHS) of the assigment must be
    a variable reference or a property reference. The
    right hand side (RHS) can be one of the following:
</p>

<p>
    <ul>
        <li>Variable reference</li>
        <li>String literal</li>
        <li>Property reference</li>
        <li>Method reference</li>
        <li>Number literal</li>
        <li>Object array</li>
    </ul>        
</p>

<p>
    Here is an example of showing the use of the
    above mentioned types:
</p>    

<p>
    <source><![CDATA[
    #set $monkey = $bill
    #set $monkey.Sucker = "monica"
    #set $monkey.Blame = $whitehouse.Leak
    #set $monkey.Plan = $spindoctor.weave($web)
    #set $monkey.Accomplice = 666
    #set $monkey.Say = ["I", $will, "rise", $again]
    ]]></source>
</p>

<p>        
    <strong>#foreach</strong>
    <br/>
</p>

<p>        
    <strong>#if/#elseif/#else</strong>
    <br/>
</p>

</s1>

<s1 title="Macros">
</s1>

</body>
</document>
